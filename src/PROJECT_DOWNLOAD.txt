
================================================================================
FILE: /.env
================================================================================


================================================================================
FILE: /.vscode/settings.json
================================================================================
{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true
}
================================================================================
FILE: /README.md
================================================================================
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.


================================================================================
FILE: /apphosting.yaml
================================================================================
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 2


================================================================================
FILE: /components.json
================================================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
================================================================================
FILE: /firebase.json
================================================================================
{
  "hosting": {
    "source": ".",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ]
  }
}

================================================================================
FILE: /next.config.ts
================================================================================

import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'res.cloudinary.com',
        port: '',
        pathname: '/**',
      }
    ],
  },
  experimental: {
    instrumentationHook: true,
  },
};

export default nextConfig;


================================================================================
FILE: /package.json
================================================================================
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "dotenv -e .env.local -- next dev --turbopack -p 9002",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.13.0",
    "@genkit-ai/next": "^1.13.0",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cloudinary": "^2.3.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.10.0",
    "framer-motion": "^11.3.8",
    "genkit": "^1.13.0",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "dotenv-cli": "^7.4.2",
    "genkit-cli": "^1.13.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
================================================================================
FILE: /src/.env
================================================================================


================================================================================
FILE: /src/ai/flows/generate-collection-flow.ts
================================================================================

'use server';
/**
 * @fileOverview An AI flow to generate a themed collection of food items.
 *
 * - generateCollection - A function that generates a food collection theme.
 * - GenerateCollectionOutput - The return type for the generateCollection function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { getProducts } from '@/lib/services/product-service';

const GenerateCollectionOutputSchema = z.object({
  title: z.string().describe('A catchy and creative title for the food collection, like "Weekend Brunch Favorites" or "Spicy Food Challenge".'),
  description: z.string().describe('A short, enticing description of the collection, about 1-2 sentences long.'),
});
export type GenerateCollectionOutput = z.infer<typeof GenerateCollectionOutputSchema>;


export async function generateCollection(): Promise<GenerateCollectionOutput> {
  return generateCollectionFlow();
}

const prompt = ai.definePrompt({
  name: 'generateCollectionPrompt',
  output: { schema: GenerateCollectionOutputSchema },
  model: 'googleai/gemini-2.0-flash',
  prompt: `You are a creative food curator for an online marketplace in Bangladesh called "Chefs' BD". 
Your task is to create a themed collection of food based on the current list of available product categories.

Consider factors like the time of day, weather, or current events in Bangladesh to come up with a creative theme.
For example: "Monsoon Munchies", "Spicy Food Challenge", "Weekend Brunch Favorites", "Sweet Tooth Cravings".

Based on the categories below, generate a creative title and a short, enticing description (1-2 sentences) for a food collection.

Available product categories:
{{#each categories}}
- {{{this}}}
{{/each}}
`,
});

const generateCollectionFlow = ai.defineFlow(
  {
    name: 'generateCollectionFlow',
    outputSchema: GenerateCollectionOutputSchema,
  },
  async () => {
    // Get unique categories from all products
    const products = await getProducts();
    const categories = [...new Set(products.map(p => p.category))];

    const { output } = await prompt({ categories });
    return output!;
  }
);


================================================================================
FILE: /src/ai/flows/generate-description-flow.ts
================================================================================

'use server';
/**
 * @fileOverview An AI flow to generate product descriptions.
 *
 * - generateDescription - A function that generates a product description based on product details.
 * - GenerateDescriptionInput - The input type for the generateDescription function.
 * - GenerateDescriptionOutput - The return type for the generateDescription function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const GenerateDescriptionInputSchema = z.object({
  productName: z.string().describe('The name of the product.'),
  category: z.enum(['Burger', 'Pizza', 'Drinks', 'Dessert', 'Biryani', 'Kebab', 'Set Menu', 'Pasta', 'Soup', 'Salad']).describe('The category of the product.'),
  keywords: z.string().optional().describe('Optional keywords to include in the description.'),
});
export type GenerateDescriptionInput = z.infer<typeof GenerateDescriptionInputSchema>;

const GenerateDescriptionOutputSchema = z.object({
  description: z.string().describe('The generated product description, approximately 20-30 words long.'),
});
export type GenerateDescriptionOutput = z.infer<typeof GenerateDescriptionOutputSchema>;


export async function generateDescription(input: GenerateDescriptionInput): Promise<GenerateDescriptionOutput> {
  return generateDescriptionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateDescriptionPrompt',
  input: { schema: GenerateDescriptionInputSchema },
  output: { schema: GenerateDescriptionOutputSchema },
  model: 'googleai/gemini-2.0-flash',
  prompt: `You are a food marketing expert. Generate a delicious, enticing, and brief product description (around 20-30 words) for a food item.

Product Name: {{{productName}}}
Category: {{{category}}}
{{#if keywords}}
Keywords to include: {{{keywords}}}
{{/if}}

Generate a description that makes the customer crave this item.
`,
});

const generateDescriptionFlow = ai.defineFlow(
  {
    name: 'generateDescriptionFlow',
    inputSchema: GenerateDescriptionInputSchema,
    outputSchema: GenerateDescriptionOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);


================================================================================
FILE: /src/ai/genkit.ts
================================================================================
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [
    googleAI({
      apiKey: process.env.GOOGLE_API_KEY,
    }),
  ],
});


================================================================================
FILE: /src/app/cart/page.tsx
================================================================================

'use client';

import { useCart } from '@/lib/hooks';
import { useAuth } from '@/lib/hooks';
import { useLanguage } from '@/lib/hooks';
import { users } from '@/lib/data';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Trash2, Loader2 } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { collection, addDoc, serverTimestamp, writeBatch, doc } from 'firebase/firestore';
import { db } from '@/firebase';
import { useState, useMemo } from 'react';
import { calculateShippingCost } from '@/lib/utils';
import type { DeliveryZone } from '@/types';

const deliveryZones: { value: DeliveryZone, label: string }[] = [
  { value: 'inside-rangpur-city', label: 'Inside Rangpur City' },
  { value: 'rangpur-division', label: 'Rangpur Division' },
  { value: 'outside-rangpur', label: 'Outside Rangpur' },
];

export default function CartPage() {
  const { cart, updateQuantity, removeFromCart, clearCart, cartCount, cartTotal } = useCart();
  const { t } = useLanguage();
  const { user, isAuthenticated } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [address, setAddress] = useState('');
  const [contact, setContact] = useState('');
  const [deliveryZone, setDeliveryZone] = useState<DeliveryZone | undefined>();

  const shippingCost = useMemo(() => {
    if (!deliveryZone || cart.length === 0) return 0;
    // For simplicity, we'll calculate shipping based on the first seller.
    // A real app might calculate per seller and sum it up.
    const firstSellerId = cart[0].sellerId;
    const seller = users.find(u => u.id === firstSellerId);
    if (!seller || !seller.zone) return 50; // Default fallback
    return calculateShippingCost(seller.zone, deliveryZone);
  }, [cart, deliveryZone]);
  
  const platformFee = useMemo(() => {
    return cart.reduce((totalFee, item) => {
        const itemTotal = item.price * item.quantity;
        const commission = item.commissionPercentage || 5; // Default to 5% if not set
        return totalFee + (itemTotal * (commission / 100));
    }, 0);
  }, [cart]);

  const finalTotal = cartTotal + shippingCost;
  const sellerReceives = cartTotal - platformFee;

  const isCheckoutDisabled = !address || !contact || !deliveryZone || isLoading || cart.length === 0;

  const handlePlaceOrder = async () => {
    if (!user || !cart.length || isCheckoutDisabled) return;
    setIsLoading(true);

    const sellerIds = [...new Set(cart.map(item => item.sellerId))];

    try {
      const orderData = {
        buyerId: user.id,
        sellerIds: sellerIds,
        items: cart,
        total: finalTotal,
        status: 'Pending' as const,
        createdAt: serverTimestamp(),
        address: address,
        contact: contact,
        shippingCost: shippingCost,
        deliveryZone: deliveryZone,
        platformFee: platformFee,
        sellerReceives: sellerReceives,
      };

      // Create the order document
      const orderRef = await addDoc(collection(db, 'orders'), orderData);
      
      // Create notifications for each seller
      const batch = writeBatch(db);
      sellerIds.forEach(sellerId => {
        const notificationRef = doc(collection(db, 'notifications'));
        batch.set(notificationRef, {
          userId: sellerId,
          orderId: orderRef.id,
          message: `New order #${orderRef.id.substring(0, 6)} received from ${user.name}.`,
          type: 'new-order',
          createdAt: serverTimestamp(),
          isRead: false,
        });
      });
      await batch.commit();

      toast({ title: 'Order Placed!', description: 'Your order has been successfully placed.' });
      clearCart();
      router.push('/orders');

    } catch (error) {
      console.error("Error placing order: ", error);
      toast({ title: 'Error', description: 'Failed to place order. Please try again.', variant: 'destructive' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleLoginRedirect = () => {
    router.push('/login');
  };

  return (
    <div className="container mx-auto py-8 md:py-12">
      <h1 className="text-center font-headline text-3xl md:text-4xl font-bold text-primary mb-8">
        {t('cart')}
      </h1>
      {cart.length === 0 ? (
        <div className="text-center">
          <p className="text-lg text-muted-foreground">Your cart is empty.</p>
          <Button asChild className="mt-4">
            <Link href="/products">{t('browseProducts')}</Link>
          </Button>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-8 lg:grid-cols-3">
          <div className="lg:col-span-2">
            <Card>
              <CardContent className="p-0">
                <div className="divide-y">
                  {cart.map((item) => (
                    <div key={item.id} className="flex items-center p-4">
                      <Image
                        src={item.image}
                        alt={item.name}
                        width={80}
                        height={80}
                        className="rounded-md object-cover"
                      />
                      <div className="ml-4 flex-grow">
                        <Link href={`/product/${item.id}`} className="font-semibold hover:text-primary">
                          {item.name}
                        </Link>
                        <p className="text-sm text-muted-foreground">৳{item.price.toFixed(2)}</p>
                      </div>
                      <div className="flex items-center gap-2 sm:gap-4">
                        <Input
                          type="number"
                          min="1"
                          value={item.quantity}
                          onChange={(e) => updateQuantity(item.id, parseInt(e.target.value))}
                          className="h-9 w-16 text-center"
                        />
                         <Button variant="ghost" size="icon" onClick={() => removeFromCart(item.id)}>
                            <Trash2 className="h-4 w-4 text-destructive" />
                         </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
          <div className="lg:col-span-1">
             <Card>
                <CardHeader>
                    <CardTitle>Order Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="address">Delivery Address</Label>
                        <Textarea 
                          id="address" 
                          placeholder="Enter your full address" 
                          value={address}
                          onChange={(e) => setAddress(e.target.value)}
                          required
                        />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="zone">Delivery Zone</Label>
                         <Select onValueChange={(value) => setDeliveryZone(value as DeliveryZone)}>
                            <SelectTrigger id="zone-select">
                                <SelectValue placeholder="Select delivery zone" />
                            </SelectTrigger>
                            <SelectContent>
                                {deliveryZones.map((zone) => (
                                    <SelectItem key={zone.value} value={zone.value}>
                                    {zone.label}
                                    </SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="contact">Contact Number</Label>
                        <Input 
                          id="contact" 
                          type="tel"
                          placeholder="Enter your mobile number" 
                          value={contact}
                          onChange={(e) => setContact(e.target.value)}
                          required
                        />
                    </div>
                    <div className="flex justify-between">
                        <span>Subtotal ({cartCount} items)</span>
                        <span>৳{cartTotal.toFixed(2)}</span>
                    </div>
                     <div className="flex justify-between">
                        <span>Shipping</span>
                        <span>৳{shippingCost.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between text-destructive">
                        <span>Platform Fee</span>
                        <span>- ৳{platformFee.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between font-semibold">
                        <span>Seller will receive</span>
                        <span>৳{sellerReceives.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between font-bold text-lg border-t pt-4 mt-2">
                        <span>Total</span>
                        <span>৳{finalTotal.toFixed(2)}</span>
                    </div>
                </CardContent>
                <CardFooter>
                  {isAuthenticated ? (
                     <Button className="w-full" size="lg" onClick={handlePlaceOrder} disabled={isCheckoutDisabled}>
                       {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                       {isLoading ? 'Placing Order...' : 'Place Order'}
                     </Button>
                  ) : (
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button className="w-full" size="lg">Place Order</Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Authentication Required</AlertDialogTitle>
                          <AlertDialogDescription>
                            You need to be logged in to place an order. Please log in to continue.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction onClick={handleLoginRedirect}>
                            Login
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  )}
                </CardFooter>
             </Card>
          </div>
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: /src/app/dashboard/add-product/page.tsx
================================================================================

'use client';

import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { useEffect, useState, useTransition, useMemo } from 'react';
import { Clock, Loader2, Image as ImageIcon, DollarSign } from 'lucide-react';
import { uploadImage, addProduct } from '@/lib/actions';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { categories } from '@/lib/data';

const categoryNames = categories.map(c => c.name) as [string, ...string[]];

const productSchema = z.object({
  name: z.string().min(1, 'Product name is required'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  price: z.coerce.number().positive('Price must be a positive number'),
  category: z.enum(categoryNames),
  deliveryTime: z.string().min(1, 'Delivery time is required'),
  commissionPercentage: z.coerce.number().min(5).max(10),
  image: z.any().refine(file => file?.[0], "Product image is required."),
});

type ProductFormValues = z.infer<typeof productSchema>;

export default function AddProductPage() {
  const { user, isAuthenticated } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [isSubmitting, startSubmitTransition] = useTransition();
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  const canAddProduct = user?.planType === 'pro' || (user?.planType === 'free' && (user?.productUploadCount ?? 0) < 5);

  useEffect(() => {
    if (!isAuthenticated || user?.role !== 'seller') {
      router.push('/login');
    }
  }, [user, isAuthenticated, router]);
  
  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: '',
      description: '',
      price: 0,
      category: 'Burger',
      deliveryTime: '',
      commissionPercentage: 5,
    },
  });
  
  const watchedPrice = form.watch('price');
  const watchedCommission = form.watch('commissionPercentage');

  const sellerReceives = useMemo(() => {
    const price = typeof watchedPrice === 'number' ? watchedPrice : 0;
    const commission = typeof watchedCommission === 'number' ? watchedCommission : 0;
    if (price > 0) {
      return price - (price * (commission / 100));
    }
    return 0;
  }, [watchedPrice, watchedCommission]);


  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    } else {
      setImagePreview(null);
    }
  };

  const handleSubmit = (data: ProductFormValues) => {
    if (!user || !canAddProduct) return;
    
    startSubmitTransition(async () => {
      try {
          const imageFile = data.image[0];
          const formData = new FormData();
          formData.append('image', imageFile);

          const uploadResult = await uploadImage(formData);

          if (uploadResult.error || !uploadResult.url) {
              throw new Error(uploadResult.error || 'Image upload failed');
          }

          const productData = { ...data, image: uploadResult.url };
          const result = await addProduct(productData, user.id);

          if (result.error) {
              throw new Error(result.error);
          }

          toast({ title: 'Product Added!', description: `${data.name} has been successfully added.` });
          router.push('/dashboard');
      } catch (error: any) {
          console.error("Failed to add product:", error);
          toast({ title: 'Error', description: error.message || 'Failed to add product. Please try again.', variant: 'destructive' });
      }
    });
  };

  if (!user || user.role !== 'seller') {
      return <div className="container py-12 text-center">Loading or redirecting...</div>;
  }
  
  if (!canAddProduct) {
    return (
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="container mx-auto py-12 text-center"
      >
            <Card className="max-w-2xl mx-auto">
                <CardHeader>
                    <CardTitle className="font-headline text-2xl text-destructive">Upload Limit Reached</CardTitle>
                    <CardDescription>You have reached the maximum number of product uploads for the free plan.</CardDescription>
                </CardHeader>
                <CardContent>
                    <p className="mb-4">Please upgrade to the Pro plan to add more products.</p>
                    <Button onClick={() => router.push('/dashboard')}>Go to Dashboard</Button>
                </CardContent>
            </Card>
      </motion.div>
    );
  }

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="container mx-auto py-12"
    >
      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">Add a New Product</CardTitle>
          <CardDescription>Fill out the form below to list a new item in your shop.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
              
              <FormField
                control={form.control}
                name="image"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product Image</FormLabel>
                    <FormControl>
                      <div className="flex flex-col items-center gap-4">
                        <div className="w-full aspect-video rounded-md border-2 border-dashed border-muted-foreground/30 flex items-center justify-center bg-muted/20 relative">
                          {imagePreview ? (
                            <Image src={imagePreview} alt="Product preview" layout="fill" objectFit="contain" className="rounded-md" />
                          ) : (
                            <div className="text-center text-muted-foreground">
                              <ImageIcon className="mx-auto h-12 w-12" />
                              <p className="mt-2">Image Preview</p>
                            </div>
                          )}
                        </div>
                        <div className="w-full">
                           <Input 
                                type="file" 
                                accept="image/*"
                                disabled={isSubmitting}
                                onChange={(e) => {
                                  field.onChange(e.target.files);
                                  handleImageChange(e);
                                }}
                                className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20"
                            />
                        </div>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product Name</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g. Classic Beef Burger" {...field} disabled={isSubmitting} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                  <FormItem>
                      <FormLabel>Product Description</FormLabel>
                      <FormControl>
                      <Textarea placeholder="Describe your product..." {...field} disabled={isSubmitting} rows={5}/>
                      </FormControl>
                      <FormMessage />
                  </FormItem>
                  )}
              />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                 <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Category</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select a category" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {categoryNames.map(name => (
                              <SelectItem key={name} value={name}>{name}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                 <FormField
                    control={form.control}
                    name="deliveryTime"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Est. Delivery Time</FormLabel>
                        <FormControl>
                        <div className="relative">
                            <Clock className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input placeholder="e.g. 20-30 mins" {...field} className="pl-10" disabled={isSubmitting}/>
                        </div>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
              </div>

               <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                  <FormField
                    control={form.control}
                    name="price"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Price (BDT)</FormLabel>
                        <FormControl>
                            <div className="relative">
                               <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                               <Input type="number" placeholder="e.g. 350" {...field} className="pl-10" disabled={isSubmitting}/>
                            </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                      control={form.control}
                      name="commissionPercentage"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Commission Rate</FormLabel>
                          <Select onValueChange={(v) => field.onChange(parseInt(v))} defaultValue={String(field.value)} disabled={isSubmitting}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select a commission rate" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="5">5%</SelectItem>
                              <SelectItem value="7">7%</SelectItem>
                              <SelectItem value="10">10%</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
              </div>

              {sellerReceives > 0 && (
                <div className="p-4 rounded-md bg-green-900/50 border border-green-500/50 text-green-300">
                    <p className="font-medium">You will receive: <span className="font-bold text-lg">৳{sellerReceives.toFixed(2)}</span></p>
                    <p className="text-xs">This is the amount you get after the {watchedCommission}% platform commission.</p>
                </div>
              )}

              <Button type="submit" className="w-full" size="lg" disabled={isSubmitting}>
                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isSubmitting ? 'Adding Product...' : 'Add Product'}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </motion.div>
  );
}


================================================================================
FILE: /src/app/dashboard/edit-product/[id]/page.tsx
================================================================================

'use client';

import { useRouter, useParams, notFound } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { useEffect, useState, useTransition, useMemo } from 'react';
import { Clock, Loader2, Image as ImageIcon, DollarSign } from 'lucide-react';
import { uploadImage, updateProduct } from '@/lib/actions';
import { getProductById } from '@/lib/services/product-service';
import type { Product } from '@/types';
import { Skeleton } from '@/components/ui/skeleton';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { categories } from '@/lib/data';

const categoryNames = categories.map(c => c.name) as [string, ...string[]];

const productSchema = z.object({
  name: z.string().min(1, 'Product name is required'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  price: z.coerce.number().positive('Price must be a positive number'),
  category: z.enum(categoryNames),
  deliveryTime: z.string().min(1, 'Delivery time is required'),
  commissionPercentage: z.coerce.number().min(5).max(10),
  image: z.any().optional(), // Image is optional on update
});

type ProductFormValues = z.infer<typeof productSchema>;

export default function EditProductPage() {
  const { user, isAuthenticated } = useAuth();
  const router = useRouter();
  const params = useParams();
  const { id } = params;
  const { toast } = useToast();
  
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(true);
  const [isSubmitting, startSubmitTransition] = useTransition();
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productSchema),
  });

  useEffect(() => {
    if (!isAuthenticated || user?.role !== 'seller') {
      router.push('/login');
    }
  }, [user, isAuthenticated, router]);

  useEffect(() => {
    if (typeof id !== 'string') return;
    const fetchProduct = async () => {
      setLoading(true);
      try {
        const fetchedProduct = await getProductById(id);
        if (!fetchedProduct || fetchedProduct.sellerId !== user?.id) {
          return notFound();
        }
        setProduct(fetchedProduct);
        form.reset({
          name: fetchedProduct.name,
          description: fetchedProduct.description,
          price: fetchedProduct.price,
          category: fetchedProduct.category,
          deliveryTime: fetchedProduct.deliveryTime,
          commissionPercentage: fetchedProduct.commissionPercentage,
        });
        setImagePreview(fetchedProduct.image);
      } catch (error) {
        console.error("Failed to fetch product", error);
        notFound();
      } finally {
        setLoading(false);
      }
    };

    if (user) {
        fetchProduct();
    }
  }, [id, user, form]);
  
  const watchedPrice = form.watch('price');
  const watchedCommission = form.watch('commissionPercentage');

  const sellerReceives = useMemo(() => {
    const price = typeof watchedPrice === 'number' ? watchedPrice : 0;
    const commission = typeof watchedCommission === 'number' ? watchedCommission : 0;
    if (price > 0) {
      return price - (price * (commission / 100));
    }
    return 0;
  }, [watchedPrice, watchedCommission]);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = (data: ProductFormValues) => {
    if (!user || !product) return;
    
    startSubmitTransition(async () => {
      try {
        let imageUrl = product.image;
        
        // Check if a new image was uploaded
        if (data.image && data.image[0]) {
          const imageFile = data.image[0];
          const formData = new FormData();
          formData.append('image', imageFile);
          
          const uploadResult = await uploadImage(formData);
          if (uploadResult.error || !uploadResult.url) {
            throw new Error(uploadResult.error || 'Image upload failed');
          }
          imageUrl = uploadResult.url;
        }

        const productData = { ...data, image: imageUrl };
        const result = await updateProduct(product.id, productData);

        if (result.error) {
          throw new Error(result.error);
        }

        toast({ title: 'Product Updated!', description: `${data.name} has been successfully updated.` });
        router.push('/dashboard');
      } catch (error: any) {
          console.error("Failed to update product:", error);
          toast({ title: 'Error', description: error.message || 'Failed to update product. Please try again.', variant: 'destructive' });
      }
    });
  };

  if (loading || !product) {
    return (
      <div className="container mx-auto py-12">
        <Card className="max-w-2xl mx-auto">
          <CardHeader>
            <Skeleton className="h-8 w-1/2" />
            <Skeleton className="h-4 w-3/4" />
          </CardHeader>
          <CardContent className="space-y-6">
            <Skeleton className="w-full h-48" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-24 w-full" />
            <div className="grid grid-cols-2 gap-6">
              <Skeleton className="h-10 w-full" />
              <Skeleton className="h-10 w-full" />
            </div>
            <Skeleton className="h-12 w-full" />
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="container mx-auto py-12"
    >
      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">Edit Product</CardTitle>
          <CardDescription>Update the details for your product below.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
              
              <FormField
                control={form.control}
                name="image"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product Image</FormLabel>
                    <FormControl>
                      <div className="flex flex-col items-center gap-4">
                        <div className="w-full aspect-video rounded-md border-2 border-dashed border-muted-foreground/30 flex items-center justify-center bg-muted/20 relative">
                          {imagePreview ? (
                            <Image src={imagePreview} alt="Product preview" layout="fill" objectFit="contain" className="rounded-md" />
                          ) : (
                            <div className="text-center text-muted-foreground">
                              <ImageIcon className="mx-auto h-12 w-12" />
                              <p className="mt-2">Image Preview</p>
                            </div>
                          )}
                        </div>
                        <div className="w-full">
                           <Input 
                                type="file" 
                                accept="image/*"
                                disabled={isSubmitting}
                                onChange={(e) => {
                                  field.onChange(e.target.files);
                                  handleImageChange(e);
                                }}
                                className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20"
                            />
                        </div>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Product Name</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g. Classic Beef Burger" {...field} disabled={isSubmitting} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                  <FormItem>
                      <FormLabel>Product Description</FormLabel>
                      <FormControl>
                      <Textarea placeholder="Describe your product..." {...field} disabled={isSubmitting} rows={5}/>
                      </FormControl>
                      <FormMessage />
                  </FormItem>
                  )}
              />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                 <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Category</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select a category" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                             {categoryNames.map(name => (
                              <SelectItem key={name} value={name}>{name}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                 <FormField
                    control={form.control}
                    name="deliveryTime"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Est. Delivery Time</FormLabel>
                        <FormControl>
                        <div className="relative">
                            <Clock className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input placeholder="e.g. 20-30 mins" {...field} className="pl-10" disabled={isSubmitting}/>
                        </div>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
              </div>

               <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                  <FormField
                    control={form.control}
                    name="price"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Price (BDT)</FormLabel>
                        <FormControl>
                            <div className="relative">
                               <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                               <Input type="number" placeholder="e.g. 350" {...field} className="pl-10" disabled={isSubmitting}/>
                            </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                      control={form.control}
                      name="commissionPercentage"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Commission Rate</FormLabel>
                          <Select onValueChange={(v) => field.onChange(parseInt(v))} defaultValue={String(field.value)} disabled={isSubmitting}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select a commission rate" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="5">5%</SelectItem>
                              <SelectItem value="7">7%</SelectItem>
                              <SelectItem value="10">10%</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
              </div>

              {sellerReceives > 0 && (
                <div className="p-4 rounded-md bg-green-900/50 border border-green-500/50 text-green-300">
                    <p className="font-medium">You will receive: <span className="font-bold text-lg">৳{sellerReceives.toFixed(2)}</span></p>
                    <p className="text-xs">This is the amount you get after the {watchedCommission}% platform commission.</p>
                </div>
              )}

              <Button type="submit" className="w-full" size="lg" disabled={isSubmitting}>
                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isSubmitting ? 'Saving Changes...' : 'Save Changes'}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </motion.div>
  );
}


================================================================================
FILE: /src/app/dashboard/page.tsx
================================================================================

'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/hooks';
import type { Product, Order, Notification } from '@/types';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Image from 'next/image';
import { MoreHorizontal, DollarSign, ShoppingCart, BarChart, PlusCircle, CheckCircle, Package, XCircle, Clock, Star, Zap, Trash2, Edit } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ChartContainer, ChartTooltip, ChartTooltipContent, ChartConfig } from '@/components/ui/chart';
import { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from 'recharts';
import { format } from 'date-fns';
import { db } from '@/firebase';
import { collection, query, where, onSnapshot, doc, updateDoc, writeBatch, serverTimestamp, deleteDoc } from 'firebase/firestore';
import { useToast } from '@/hooks/use-toast';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { updateProduct } from '@/lib/actions';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

export default function DashboardPage() {
  const { user, isAuthenticated, loading } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [sellerProducts, setSellerProducts] = useState<Product[]>([]);
  const [sellerOrders, setSellerOrders] = useState<Order[]>([]);

  useEffect(() => {
    if (loading) return;
    if (!isAuthenticated || user?.role !== 'seller') {
      router.push('/login');
      return;
    }

    // Fetch Products
    const productsQuery = query(collection(db, 'products'), where('sellerId', '==', user.id));
    const unsubscribeProducts = onSnapshot(productsQuery, (snapshot) => {
      const productsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Product[];
      setSellerProducts(productsData);
    });

    // Fetch Orders related to this seller
    const ordersQuery = query(collection(db, 'orders'), where('sellerIds', 'array-contains', user.id));
     const unsubscribeOrders = onSnapshot(ordersQuery, (snapshot) => {
      const ordersData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Order[];
       // Filter items to only show those belonging to the current seller for display
      const relevantOrders = ordersData.map(order => ({
        ...order,
        items: order.items.filter(item => item.sellerId === user.id)
      })).filter(order => order.items.length > 0);
      setSellerOrders(relevantOrders);
    });

    return () => {
      unsubscribeProducts();
      unsubscribeOrders();
    };
  }, [user, isAuthenticated, loading, router]);

  const deliveredOrders = sellerOrders.filter(order => order.status === 'Delivered');

  const totalRevenue = deliveredOrders.reduce((acc, order) => {
    const sellerItemsTotal = order.items.reduce((itemAcc, item) => {
        const itemTotal = item.price * item.quantity;
        const commission = item.commissionPercentage || 5;
        return itemAcc + (itemTotal - (itemTotal * (commission / 100)));
    }, 0);
    return acc + sellerItemsTotal;
  }, 0);

  const totalOrders = sellerOrders.length;
  const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;
  
  const salesData = deliveredOrders.reduce((acc, order) => {
    if (!order.createdAt) return acc;
    const orderDate = (order.createdAt as any).toDate(); // Convert Firestore Timestamp
    const month = format(orderDate, 'MMM yyyy');
    const sellerItemsTotal = order.items.reduce((itemAcc, item) => itemAcc + item.price * item.quantity, 0);

    const existingMonth = acc.find(d => d.month === month);
    if (existingMonth) {
      existingMonth.sales += sellerItemsTotal;
    } else {
      acc.push({ month, sales: sellerItemsTotal });
    }
    return acc;
  }, [] as { month: string; sales: number }[]).reverse();


  const chartConfig = {
    sales: {
      label: 'Sales (BDT)',
      color: 'hsl(var(--primary))',
    },
  } satisfies ChartConfig;

  const handleStatusChange = async (orderId: string, status: Order['status'], buyerId: string) => {
    const orderRef = doc(db, 'orders', orderId);
    try {
      await updateDoc(orderRef, { status });

      const batch = writeBatch(db);
      const notificationRef = doc(collection(db, 'notifications'));
      batch.set(notificationRef, {
          userId: buyerId,
          orderId: orderId,
          message: `Your order #${orderId.substring(0, 6)} is now ${status}.`,
          type: 'order-status',
          createdAt: serverTimestamp(),
          isRead: false,
      });
      await batch.commit();

      toast({ title: 'Order Updated', description: `Order status changed to ${status}.` });
    } catch (error) {
        console.error("Error updating status:", error);
        toast({ title: 'Error', description: 'Failed to update order status.', variant: 'destructive' });
    }
  };
  
  const handleDelete = async (productId: string) => {
    try {
        await deleteDoc(doc(db, "products", productId));
        toast({ title: "Product Deleted", description: "The product has been removed." });
    } catch (error) {
        console.error("Error deleting product:", error);
        toast({ title: 'Error', description: 'Failed to delete product.', variant: 'destructive' });
    }
  };

  const handleUpgrade = async () => {
    if (!user) return;
    try {
        const userRef = doc(db, 'users', user.id);
        await updateDoc(userRef, { planType: 'pro' });
        toast({ title: 'Upgrade Successful!', description: "You are now a Pro Seller!" });
        // This will trigger a re-render as useAuth hook listens to user changes
    } catch (error) {
        console.error("Error upgrading account:", error);
        toast({ title: 'Error', description: 'Failed to upgrade account.', variant: 'destructive' });
    }
  };

  const handleAvailabilityChange = async (productId: string, isAvailable: boolean) => {
    try {
      const result = await updateProduct(productId, { isAvailable });
      if (result.error) {
        throw new Error(result.error);
      }
      toast({ title: 'Stock Updated', description: `Product is now ${isAvailable ? 'available' : 'unavailable'}.` });
    } catch (error: any) {
      console.error("Error updating availability:", error);
      toast({ title: 'Error', description: error.message || 'Failed to update stock status.', variant: 'destructive' });
    }
  };


  const getStatusVariant = (status: Order['status']): "default" | "secondary" | "destructive" | "outline" => {
    switch (status) {
      case 'Delivered': return 'default';
      case 'Preparing': return 'secondary';
      case 'Pending': return 'outline';
      case 'Cancelled': return 'destructive';
      default: return 'default';
    }
  };
  
  if (loading || !user || user.role !== 'seller') {
      return <div className="container py-12 text-center">Loading or redirecting...</div>;
  }

  const OrderStatusIcon = ({ status }: { status: Order['status'] }) => {
    switch (status) {
        case 'Pending': return <Clock className="h-4 w-4 text-yellow-500" />;
        case 'Preparing': return <Package className="h-4 w-4 text-blue-500" />;
        case 'Delivered': return <CheckCircle className="h-4 w-4 text-green-500" />;
        case 'Cancelled': return <XCircle className="h-4 w-4 text-red-500" />;
        default: return null;
    }
  };

  return (
    <div className="container mx-auto py-8">
       <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
            <h1 className="font-headline text-3xl md:text-4xl font-bold text-primary">
                Seller Dashboard
            </h1>
            <Button asChild>
                <Link href="/dashboard/add-product">
                    <PlusCircle className="mr-2 h-4 w-4"/>
                    Add New Product
                </Link>
            </Button>
       </div>
       
        <Tabs defaultValue="overview">
            <TabsList className="mb-4">
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="products">Products</TabsTrigger>
                <TabsTrigger value="orders">Orders</TabsTrigger>
            </TabsList>
            <TabsContent value="overview">
                {user.planType === 'free' && (
                    <Card className="mb-8 bg-blue-50 border-blue-200">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2 text-blue-800">
                                <Zap className="h-6 w-6"/> You are on the Free Plan!
                            </CardTitle>
                             <CardDescription className="text-blue-700">
                                You can add up to 5 products. Upgrade to Pro for unlimited products and more features.
                             </CardDescription>
                        </CardHeader>
                        <CardContent>
                             <Button onClick={handleUpgrade} className="bg-blue-600 hover:bg-blue-700">
                                <Star className="mr-2 h-4 w-4"/>
                                Upgrade to Pro
                             </Button>
                        </CardContent>
                    </Card>
                )}
                {user.planType === 'pro' && (
                     <Card className="mb-8 bg-green-50 border-green-200">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2 text-green-800">
                                <Star className="h-6 w-6"/> You are a Pro Seller!
                            </CardTitle>
                             <CardDescription className="text-green-700">
                                You have access to all features, including unlimited product uploads and detailed analytics.
                             </CardDescription>
                        </CardHeader>
                    </Card>
                )}

                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 mb-8">
                    <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
                        <DollarSign className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">৳{totalRevenue.toFixed(2)}</div>
                    </CardContent>
                    </Card>
                    <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Total Orders</CardTitle>
                        <ShoppingCart className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">+{totalOrders}</div>
                    </CardContent>
                    </Card>
                    <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                        <CardTitle className="text-sm font-medium">Average Order Value</CardTitle>
                        <BarChart className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                        <div className="text-2xl font-bold">৳{averageOrderValue.toFixed(2)}</div>
                    </CardContent>
                    </Card>
                </div>
                 <Card>
                    <CardHeader>
                        <CardTitle>Sales Overview</CardTitle>
                        <CardDescription>Your sales performance over the last few months.</CardDescription>
                    </CardHeader>
                    <CardContent className="pl-2">
                        <ChartContainer config={chartConfig} className="h-[300px] w-full">
                        <RechartsBarChart data={salesData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                            <CartesianGrid vertical={false} />
                            <XAxis dataKey="month" tickLine={false} axisLine={false} tickMargin={8} fontSize={12} />
                            <YAxis tickLine={false} axisLine={false} tickMargin={8} fontSize={12} />
                            <ChartTooltip
                                cursor={false}
                                content={<ChartTooltipContent indicator="dot" />}
                                />
                            <Bar dataKey="sales" fill="var(--color-sales)" radius={4} />
                        </RechartsBarChart>
                        </ChartContainer>
                    </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="products">
                <Card>
                    <CardHeader>
                        <CardTitle>My Products</CardTitle>
                        <CardDescription>Manage your products here. You have added {sellerProducts.length} product(s).</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead className="hidden w-[80px] sm:table-cell">Image</TableHead>
                                    <TableHead>Name</TableHead>
                                    <TableHead>Stock</TableHead>
                                    <TableHead className="hidden md:table-cell">Price</TableHead>
                                    <TableHead className="hidden md:table-cell">Commission</TableHead>
                                    <TableHead><span className="sr-only">Actions</span></TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {sellerProducts.map(product => {
                                    const isAvailable = product.isAvailable ?? true;
                                    return (
                                    <TableRow key={product.id}>
                                        <TableCell className="hidden sm:table-cell">
                                            <Image
                                                alt={product.name}
                                                className="aspect-square rounded-md object-cover"
                                                height="64"
                                                src={product.image}
                                                width="64"
                                                data-ai-hint={product.category}
                                            />
                                        </TableCell>
                                        <TableCell className="font-medium">
                                            {product.name}
                                            <div className="md:hidden text-muted-foreground">৳{product.price.toFixed(2)}</div>
                                            <div className="md:hidden text-muted-foreground text-xs">Commission: {product.commissionPercentage}%</div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="flex items-center space-x-2">
                                                <Switch
                                                    id={`stock-${product.id}`}
                                                    checked={isAvailable}
                                                    onCheckedChange={(checked) => handleAvailabilityChange(product.id, checked)}
                                                />
                                                <Label htmlFor={`stock-${product.id}`} className={isAvailable ? 'text-green-600' : 'text-red-600'}>
                                                   {isAvailable ? 'In Stock' : 'Out of Stock'}
                                                </Label>
                                            </div>
                                        </TableCell>
                                        <TableCell className="hidden md:table-cell">৳{product.price.toFixed(2)}</TableCell>
                                        <TableCell className="hidden md:table-cell">{product.commissionPercentage}%</TableCell>
                                        <TableCell>
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button aria-haspopup="true" size="icon" variant="ghost">
                                                        <MoreHorizontal className="h-4 w-4" />
                                                        <span className="sr-only">Toggle menu</span>
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuItem asChild>
                                                      <Link href={`/dashboard/edit-product/${product.id}`} className="flex items-center gap-2">
                                                        <Edit className="h-4 w-4" />
                                                        <span>Edit</span>
                                                      </Link>
                                                    </DropdownMenuItem>
                                                    <AlertDialog>
                                                      <AlertDialogTrigger asChild>
                                                        <Button variant="ghost" className="w-full justify-start p-2 h-auto font-normal text-destructive hover:text-destructive flex items-center gap-2">
                                                            <Trash2 className="h-4 w-4" />
                                                            <span>Delete</span>
                                                        </Button>
                                                      </AlertDialogTrigger>
                                                      <AlertDialogContent>
                                                        <AlertDialogHeader>
                                                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                                            <AlertDialogDescription>This action cannot be undone. This will permanently delete the product.</AlertDialogDescription>
                                                        </AlertDialogHeader>
                                                        <AlertDialogFooter>
                                                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                                                            <AlertDialogAction onClick={() => handleDelete(product.id)} className="bg-destructive hover:bg-destructive/90">Delete</AlertDialogAction>
                                                        </AlertDialogFooter>
                                                      </AlertDialogContent>
                                                    </AlertDialog>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                    )
                                })}
                            </TableBody>
                        </Table>
                        {sellerProducts.length === 0 && (
                            <div className="text-center py-10 text-muted-foreground">You have not added any products yet.</div>
                        )}
                    </CardContent>
                </Card>
            </TabsContent>
            <TabsContent value="orders">
                 <Card>
                    <CardHeader>
                        <CardTitle>Incoming Orders</CardTitle>
                        <CardDescription>Manage your incoming orders here.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Order ID</TableHead>
                                    <TableHead>Items</TableHead>
                                    <TableHead>You Receive</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead>Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {sellerOrders.map(order => {
                                    const sellerItems = order.items.filter(item => item.sellerId === user.id);
                                    const subtotal = sellerItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
                                    const platformFee = sellerItems.reduce((acc, item) => {
                                        const itemTotal = item.price * item.quantity;
                                        const commission = item.commissionPercentage || 5;
                                        return acc + (itemTotal * (commission / 100));
                                    }, 0);
                                    const sellerReceives = subtotal - platformFee;

                                    return (
                                        <TableRow key={order.id}>
                                            <TableCell className="font-medium">#{order.id?.substring(0,6)}</TableCell>
                                            <TableCell>
                                            {sellerItems.map(item => (
                                                <div key={item.id}>{item.name} x {item.quantity}</div>
                                            ))}
                                            </TableCell>
                                            <TableCell>৳{sellerReceives.toFixed(2)}</TableCell>
                                            <TableCell>
                                                <Badge variant={getStatusVariant(order.status)} className="capitalize flex items-center gap-1 w-fit">
                                                    <OrderStatusIcon status={order.status} />
                                                    {order.status}
                                                </Badge>
                                            </TableCell>
                                            <TableCell>
                                                <DropdownMenu>
                                                    <DropdownMenuTrigger asChild>
                                                        <Button variant="ghost" size="sm">Update Status</Button>
                                                    </DropdownMenuTrigger>
                                                    <DropdownMenuContent>
                                                        <DropdownMenuItem onClick={() => handleStatusChange(order.id!, 'Preparing', order.buyerId)}>Preparing</DropdownMenuItem>
                                                        <DropdownMenuItem onClick={() => handleStatusChange(order.id!, 'Delivered', order.buyerId)}>Delivered</DropdownMenuItem>
                                                        <DropdownMenuItem onClick={() => handleStatusChange(order.id!, 'Cancelled', order.buyerId)} className="text-destructive">Cancel</DropdownMenuItem>
                                                    </DropdownMenuContent>
                                                </DropdownMenu>
                                            </TableCell>
                                        </TableRow>
                                    )
                                })}
                            </TableBody>
                        </Table>
                         {sellerOrders.length === 0 && (
                            <div className="text-center py-10 text-muted-foreground">You have no orders yet.</div>
                        )}
                    </CardContent>
                </Card>
            </TabsContent>
        </Tabs>
    </div>
  );
}


================================================================================
FILE: /src/app/fonts.ts
================================================================================
import { PT_Sans, Space_Grotesk } from 'next/font/google';

export const ptSans = PT_Sans({
  subsets: ['latin'],
  weight: ['400', '700'],
  style: ['normal', 'italic'],
  variable: '--font-pt-sans',
});

export const spaceGrotesk = Space_Grotesk({
  subsets: ['latin'],
  weight: ['300', '400', '500', '600', '700'],
  variable: '--font-space-grotesk',
});


================================================================================
FILE: /src/app/globals.css
================================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 40 33% 98%; /* Lighter Cream */
    --foreground: 20 14% 21%; /* Dark Brown */
    
    --card: 40 50% 100%; /* White */
    --card-foreground: 20 14% 21%;
    
    --popover: 40 50% 100%;
    --popover-foreground: 20 14% 21%;
    
    --primary: 340 90% 80%; /* Sweeter Pastel Pink */
    --primary-foreground: 20 14% 15%;

    --secondary: 340 40% 94%; /* Lighter Pink */
    --secondary-foreground: 20 14% 21%;
    
    --muted: 340 30% 92%;
    --muted-foreground: 20 14% 45%;
    
    --accent: 340 30% 92%;
    --accent-foreground: 20 14% 21%;

    --destructive: 0 72% 51%;
    --destructive-foreground: 0 0% 100%;

    --border: 340 30% 88%;
    --input: 340 30% 94%;
    --ring: 340 90% 80%;

    --radius: 1rem;

    --chart-1: 340 82% 76%;
    --chart-2: 190 70% 65%;
    --chart-3: 45 90% 65%;
    --chart-4: 280 85% 75%;
    --chart-5: 158 75% 65%;
  }

  .dark {
    --background: 224 71% 4%; /* Deep, dark navy */
    --foreground: 210 40% 98%;
    
    --card: 224 71% 9%; /* Slightly lighter navy */
    --card-foreground: 210 40% 98%;
    
    --popover: 224 71% 4%;
    --popover-foreground: 210 40% 98%;
    
    --primary: 217 91% 60%; /* Electric Blue */
    --primary-foreground: 210 40% 98%;

    --secondary: 215 28% 17%;
    --secondary-foreground: 210 40% 98%;
    
    --muted: 215 28% 17%;
    --muted-foreground: 215 21% 65%;
    
    --accent: 215 28% 17%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --border: 215 28% 17%;
    --input: 215 28% 17%;
    --ring: 217 91% 60%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.animated-card {
  animation: fade-in-up 0.6s ease-out forwards;
}

.text-shadow {
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.text-shadow-lg {
  text-shadow: 0 4px 8px rgba(0,0,0,0.15);
}


================================================================================
FILE: /src/app/layout.tsx
================================================================================

import type { Metadata } from 'next';
import './globals.css';
import { Toaster } from '@/components/ui/toaster';
import { AppProvider } from '@/contexts/app-provider';
import Header from '@/components/layout/header';
import Footer from '@/components/layout/footer';
import { ptSans, spaceGrotesk } from '@/app/fonts';
import { cn } from '@/lib/utils';

export const metadata: Metadata = {
  title: "Chefs' BD",
  description: 'Authentic flavors, delivered to your door.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          'font-body antialiased',
          ptSans.variable,
          spaceGrotesk.variable
        )}
      >
        <AppProvider>
          <div className="flex min-h-screen flex-col">
            <Header />
            <main className="flex-grow">{children}</main>
            <Footer />
          </div>
          <Toaster />
        </AppProvider>
      </body>
    </html>
  );
}


================================================================================
FILE: /src/app/login/page.tsx
================================================================================

'use client';

import { useRouter } from 'next/navigation';
import { useAuth, useLanguage } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Loader2 } from 'lucide-react';
import { useTransition } from 'react';
import { motion } from 'framer-motion';

const loginSchema = z.object({
  email: z.string().email({ message: "Invalid email address." }),
  password: z.string().min(6, { message: "Password must be at least 6 characters." }),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const { login } = useAuth();
  const { t } = useLanguage();
  const router = useRouter();
  const { toast } = useToast();
  const [isPending, startTransition] = useTransition();

  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: { email: '', password: '' },
  });

  const handleSubmit = (data: LoginFormValues) => {
    startTransition(async () => {
      const success = await login(data.email, data.password);
      if (success) {
        toast({ title: "Login successful!" });
        router.push('/');
      }
    });
  };

  return (
    <motion.div 
      className="container flex min-h-[80vh] items-center justify-center py-12"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="w-full max-w-sm">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">{t('login')}</CardTitle>
          <CardDescription>Enter your email below to login to your account.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="m@example.com" {...field} disabled={isPending} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input type="password" {...field} disabled={isPending} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isPending}>
                {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isPending ? "Logging in..." : t('login')}
              </Button>
            </form>
          </Form>
           <div className="mt-4 text-center text-sm">
            Don't have an account?{" "}
            <Link href="/register" className="underline hover:text-primary">
              {t('register')}
            </Link>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}


================================================================================
FILE: /src/app/orders/page.tsx
================================================================================

'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/hooks';
import type { Order } from '@/types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Image from 'next/image';
import { format } from 'date-fns';
import { db } from '@/firebase';
import { collection, query, where, onSnapshot, orderBy } from 'firebase/firestore';

export default function OrdersPage() {
  const { user, isAuthenticated, loading } = useAuth();
  const router = useRouter();
  const [userOrders, setUserOrders] = useState<Order[]>([]);

  useEffect(() => {
    if (loading) return;
    if (!isAuthenticated || user?.role !== 'buyer') {
      router.push('/login');
      return;
    }

    const ordersQuery = query(
      collection(db, 'orders'), 
      where('buyerId', '==', user.id),
      orderBy('createdAt', 'desc')
    );
    
    const unsubscribe = onSnapshot(ordersQuery, (snapshot) => {
      setUserOrders(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }) as Order));
    });

    return () => unsubscribe();
  }, [user, isAuthenticated, loading, router]);
  
  if (loading || !user || user.role !== 'buyer') {
    return <div className="container py-12 text-center">Loading or redirecting...</div>;
  }

  const getStatusVariant = (status: Order['status']): "default" | "secondary" | "destructive" | "outline" => {
    switch (status) {
      case 'Delivered':
        return 'default';
      case 'Preparing':
        return 'secondary';
      case 'Pending':
        return 'outline';
      case 'Cancelled':
        return 'destructive';
      default:
        return 'default';
    }
  };

  return (
    <div className="container mx-auto py-12">
      <div className="mb-8">
        <h1 className="font-headline text-4xl font-bold text-primary">My Orders</h1>
        <p className="text-muted-foreground">View your order history below.</p>
      </div>

      <div className="space-y-6">
        {userOrders.length > 0 ? (
          userOrders.map(order => (
            <Card key={order.id} className={order.status === 'Cancelled' ? 'bg-muted/30' : ''}>
              <CardHeader className="flex flex-row justify-between items-start">
                <div>
                  <CardTitle>Order #{order.id?.substring(0, 6)}</CardTitle>
                  <CardDescription>
                    Placed on {format((order.createdAt as any).toDate(), 'MMMM d, yyyy')}
                  </CardDescription>
                </div>
                <Badge variant={getStatusVariant(order.status)} className="capitalize">
                  {order.status}
                </Badge>
              </CardHeader>
              <CardContent>
                <div className="divide-y">
                  {order.items.map(item => (
                    <div key={item.id} className="flex items-center justify-between py-3">
                      <div className="flex items-center gap-4">
                        <Image
                          src={item.image}
                          alt={item.name}
                          width={64}
                          height={64}
                          className="rounded-md object-cover"
                        />
                        <div>
                          <p className="font-semibold">{item.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {item.quantity} x ৳{item.price.toFixed(2)}
                          </p>
                        </div>
                      </div>
                      <p className="font-semibold">৳{(item.quantity * item.price).toFixed(2)}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
              <CardFooter className="flex justify-end bg-muted/50 p-4">
                 <div className="text-right">
                    <p className="text-muted-foreground">Total</p>
                    <p className="text-xl font-bold">৳{order.total.toFixed(2)}</p>
                 </div>
              </CardFooter>
            </Card>
          ))
        ) : (
          <div className="text-center py-20">
            <p className="text-lg text-muted-foreground">You haven't placed any orders yet.</p>
          </div>
        )}
      </div>
    </div>
  );
}


================================================================================
FILE: /src/app/page.tsx
================================================================================

'use client';

import CategoryShowcase from '@/components/category-showcase';
import FeaturedProducts from '@/components/featured-products';
import FeaturedSellers from '@/components/featured-sellers';
import HeroSection from '@/components/hero-section';
import TodaysSpecial from '@/components/todays-special';

export default function HomePage() {
  return (
    <div className="flex flex-col">
      <HeroSection />
      <CategoryShowcase />
      <FeaturedProducts />
      <FeaturedSellers />
      <TodaysSpecial />
    </div>
  );
}


================================================================================
FILE: /src/app/product/[id]/page.tsx
================================================================================

'use client';

import { useState, useMemo, useTransition, useEffect } from 'react';
import { users, reviews as allReviews } from '@/lib/data';
import Image from 'next/image';
import { notFound } from 'next/navigation';
import { useAuth, useCart, useLanguage } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import RatingStars from '@/components/rating-stars';
import RatingInput from '@/components/rating-input';
import { useToast } from '@/hooks/use-toast';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import Link from 'next/link';
import { ShoppingCart, Loader2, Clock, Mail, Phone, ChevronDown, BadgeAlert } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { formatDistanceToNow } from 'date-fns';
import ProductCard from '@/components/product-card';
import { getProductById, getProducts } from '@/lib/services/product-service';
import { getUserById } from '@/lib/services/user-service';
import type { Product, User } from '@/types';
import { Skeleton } from '@/components/ui/skeleton';
import MapCard from '@/components/map-card';
import { motion } from 'framer-motion';
import { Badge } from '@/components/ui/badge';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"

const reviewSchema = z.object({
  rating: z.number().min(1, 'Please select a rating.'),
  comment: z.string().min(10, 'Comment must be at least 10 characters.'),
});

type ReviewFormValues = z.infer<typeof reviewSchema>;


export default function ProductDetailPage({ params }: { params: { id: string } }) {
  const { user, isAuthenticated } = useAuth();
  const { addToCart } = useCart();
  const { t } = useLanguage();
  const { toast } = useToast();
  const [reviews, setReviews] = useState(allReviews.filter(r => r.productId === params.id));
  const [isSubmitting, startTransition] = useTransition();
  const [product, setProduct] = useState<Product | null>(null);
  const [seller, setSeller] = useState<User | null>(null);
  const [relatedProducts, setRelatedProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProductData = async () => {
      setLoading(true);
      try {
        const fetchedProduct = await getProductById(params.id);
        if (fetchedProduct) {
          setProduct(fetchedProduct);
          const [allProducts, fetchedSeller] = await Promise.all([
            getProducts(),
            getUserById(fetchedProduct.sellerId)
          ]);
          
          if (fetchedSeller) setSeller(fetchedSeller);

          const related = allProducts
            .filter(p => p.category === fetchedProduct.category && p.id !== fetchedProduct.id)
            .slice(0, 4);
          setRelatedProducts(related);

        } else {
          notFound();
        }
      } catch (error) {
        console.error("Failed to fetch product data:", error);
        notFound();
      } finally {
        setLoading(false);
      }
    };
    fetchProductData();
  }, [params.id]);


  const averageRating = useMemo(() => {
    if (!product) return 0;
    if (reviews.length === 0) return product.rating;
    const total = reviews.reduce((acc, review) => acc + review.rating, 0);
    return total / reviews.length;
  }, [reviews, product]);


  const form = useForm<ReviewFormValues>({
    resolver: zodResolver(reviewSchema),
    defaultValues: { rating: 0, comment: '' },
  });

  const handleAddToCart = () => {
    if (!product) return;
    addToCart(product);
    toast({ title: `${product.name} added to cart!` });
  };

  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

  const handleReviewSubmit = (data: ReviewFormValues) => {
    if (!user || !product) return;
    
    startTransition(async () => {
      await sleep(500);
      const newReview = {
        id: `review-${Date.now()}`,
        productId: product.id,
        userId: user.id,
        userName: user.name,
        userAvatar: user.avatar,
        rating: data.rating,
        comment: data.comment,
        createdAt: new Date(),
      };
      setReviews(prev => [newReview, ...prev]);
      allReviews.unshift(newReview);
      form.reset();
      toast({ title: 'Review Submitted!', description: 'Thank you for your feedback.' });
    });
  };
  
  if (loading) {
    return (
        <div className="container mx-auto max-w-6xl py-12">
            <div className="grid md:grid-cols-2 gap-12">
                <Skeleton className="w-full aspect-square rounded-2xl" />
                <div className="flex flex-col gap-6">
                    <Skeleton className="h-12 w-3/4" />
                    <Skeleton className="h-6 w-1/4" />
                    <Skeleton className="h-24 w-full" />
                    <Skeleton className="h-12 w-1/2" />
                    <Skeleton className="h-14 w-1/3" />
                </div>
            </div>
        </div>
    )
  }
  
  if (!product) {
    notFound();
  }

  const isAvailable = product.isAvailable ?? true;

  return (
    <motion.div 
        className="container mx-auto max-w-7xl py-12"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
    >
      <div className="grid md:grid-cols-2 gap-12 items-start">
        <motion.div 
            className="overflow-hidden rounded-2xl aspect-square"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.1, duration: 0.5 }}
        >
            <Image
              src={product.image}
              alt={product.name}
              width={800}
              height={800}
              className="w-full h-full object-cover"
              data-ai-hint={`${product.category}`}
            />
        </motion.div>
        <motion.div 
            className="flex flex-col justify-center"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2, duration: 0.5 }}
        >
          <h1 className="font-headline text-4xl md:text-5xl font-bold">{product.name}</h1>
          <div className="mt-4 flex items-center gap-4">
             <RatingStars rating={averageRating} />
             <span className="text-sm text-muted-foreground">{averageRating.toFixed(1)} / 5 ({reviews.length} reviews)</span>
          </div>
          <p className="mt-6 text-lg text-muted-foreground">{product.description}</p>
          
          <div className="my-8 flex items-baseline gap-6">
            <div className="text-5xl font-bold text-primary">৳{product.price.toFixed(2)}</div>
            <div className="flex items-center gap-2 text-muted-foreground">
                <Clock className="h-5 w-5"/>
                <span className="font-medium">{product.deliveryTime}</span>
            </div>
          </div>
          
          {seller && (
             <div className="mt-4 rounded-lg border p-4">
                <p className="text-sm font-medium text-muted-foreground">Sold by:</p>
                <Link href={`/seller/${seller.id}`} className="flex items-center gap-3 mt-2 group">
                    <Avatar>
                        <AvatarImage src={seller.avatar} alt={seller.shopName || seller.name} data-ai-hint="person avatar"/>
                        <AvatarFallback>{(seller.shopName || seller.name).charAt(0)}</AvatarFallback>
                    </Avatar>
                    <span className="font-semibold group-hover:text-primary transition-colors">{seller.shopName || seller.name}</span>
                </Link>
             </div>
          )}

          <div className="mt-10 flex gap-4">
            <motion.div whileTap={{ scale: 0.95 }} className="w-full md:w-auto">
                <Button onClick={handleAddToCart} size="lg" className="w-full md:w-auto font-bold text-lg px-8 py-6" disabled={!isAvailable}>
                    {isAvailable ? <>
                        <ShoppingCart className="mr-2 h-5 w-5"/>
                        {t('addToCart')}
                    </> : <>
                        <BadgeAlert className="mr-2 h-5 w-5"/>
                        Out of Stock
                    </>}
                </Button>
            </motion.div>
            {seller && (
              <Collapsible>
                <CollapsibleTrigger asChild>
                    <motion.div whileTap={{ scale: 0.95 }}>
                        <Button variant="outline" size="lg" className="px-8 py-6">Contact Seller <ChevronDown className="ml-2 h-4 w-4"/></Button>
                    </motion.div>
                </CollapsibleTrigger>
                <CollapsibleContent className="absolute z-10 mt-2 w-full max-w-xs rounded-lg bg-card border p-4 shadow-lg">
                  <div className="space-y-3">
                    <h4 className="font-semibold">Seller Contact</h4>
                    <a href={`mailto:${seller.email}`} className="flex items-center gap-3 text-sm hover:text-primary"><Mail className="h-4 w-4" /><span>{seller.email}</span></a>
                    {seller.phone && (<a href={`tel:${seller.phone}`} className="flex items-center gap-3 text-sm hover:text-primary"><Phone className="h-4 w-4" /><span>{seller.phone}</span></a>)}
                  </div>
                </CollapsibleContent>
              </Collapsible>
            )}
          </div>
          {!isAvailable && (
            <Badge variant="destructive" className="mt-4 w-fit">This item is temporarily unavailable.</Badge>
          )}
        </motion.div>
      </div>
      
      <Separator className="my-16" />

      {relatedProducts.length > 0 && (
        <div className="mb-16">
          <h2 className="font-headline text-3xl font-bold mb-8 text-center">Related Products</h2>
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
            {relatedProducts.map((p) => ( <ProductCard key={p.id} product={p} /> ))}
          </div>
        </div>
      )}

      {seller?.shopAddress && (
        <div className="mb-16">
            <h2 className="font-headline text-3xl font-bold mb-8 text-center">Seller Location</h2>
            <MapCard address={seller.shopAddress} />
        </div>
      )}

       <div className="grid md:grid-cols-3 gap-12">
        <div className="md:col-span-2">
            <Card>
                <CardHeader><CardTitle>Leave a Review</CardTitle></CardHeader>
                <CardContent>
                    {isAuthenticated ? (
                       <Form {...form}>
                         <form onSubmit={form.handleSubmit(handleReviewSubmit)} className="space-y-6">
                            <FormField control={form.control} name="rating" render={({ field }) => ( <FormItem><FormLabel>Your Rating</FormLabel><FormControl><RatingInput disabled={isSubmitting} value={field.value} onChange={field.onChange} /></FormControl><FormMessage /></FormItem> )}/>
                            <FormField control={form.control} name="comment" render={({ field }) => ( <FormItem><FormLabel>Your Comment</FormLabel><FormControl><Textarea disabled={isSubmitting} placeholder="Tell us what you think..." {...field} /></FormControl><FormMessage /></FormItem> )}/>
                            <Button type="submit" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                {isSubmitting ? 'Submitting...' : 'Submit Review'}
                            </Button>
                         </form>
                       </Form>
                    ) : ( <div className="text-center text-muted-foreground p-8"><p>You must be <Link href="/login" className="text-primary underline">logged in</Link> to leave a review.</p></div> )}
                </CardContent>
            </Card>
        </div>
        <div>
             <h2 className="text-2xl font-bold mb-4 font-headline">Customer Reviews</h2>
             <div className="space-y-6">
                {reviews.length > 0 ? (
                    reviews.map(review => (
                        <div key={review.id} className="flex gap-4">
                            <Avatar><AvatarImage src={review.userAvatar} alt={review.userName} data-ai-hint="person avatar"/><AvatarFallback>{review.userName.charAt(0)}</AvatarFallback></Avatar>
                            <div className="flex-1">
                               <div className="flex justify-between items-center"><p className="font-semibold">{review.userName}</p><span className="text-xs text-muted-foreground">{formatDistanceToNow(new Date(review.createdAt as Date), { addSuffix: true })}</span></div>
                                <RatingStars rating={review.rating} className="my-1" />
                                <p className="text-sm text-muted-foreground">{review.comment}</p>
                            </div>
                        </div>
                    ))
                ) : ( <p className="text-muted-foreground">No reviews yet. Be the first!</p> )}
             </div>
        </div>
      </div>
    </motion.div>
  );
}


================================================================================
FILE: /src/app/products/page.tsx
================================================================================

import ProductList from '@/components/product-list';
import { getProducts } from '@/lib/services/product-service';
import { getAllSellers } from '@/lib/services/user-service';

export default async function ProductsPage() {
  // Fetch both products and sellers in parallel
  const [products, sellers] = await Promise.all([
    getProducts(),
    getAllSellers()
  ]);

  return <ProductList products={products} allSellers={sellers} />;
}


================================================================================
FILE: /src/app/profile/page.tsx
================================================================================

'use client';

import { useAuth } from '@/lib/hooks';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { useRouter } from 'next/navigation';
import { useEffect, useState, useTransition } from 'react';
import { Skeleton } from '@/components/ui/skeleton';
import { User, Mail, Store, MapPin, Loader2, UploadCloud, Phone } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import MapCard from '@/components/map-card';
import { updateUser, uploadImage } from '@/lib/actions';
import { useToast } from '@/hooks/use-toast';
import Image from 'next/image';
import { motion } from 'framer-motion';

export default function ProfilePage() {
  const { user, loading, isAuthenticated, refreshUser } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [isPending, startTransition] = useTransition();

  // Form state
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [shopName, setShopName] = useState('');
  const [shopAddress, setShopAddress] = useState('');
  const [mapPreviewAddress, setMapPreviewAddress] = useState('');
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      router.push('/login');
    }
  }, [loading, isAuthenticated, router]);
  
  useEffect(() => {
    if (user) {
      setName(user.name);
      setPhone(user.phone || '');
      setShopName(user.shopName || '');
      setShopAddress(user.shopAddress || '');
      setMapPreviewAddress(user.shopAddress || '');
      setImagePreview(user.avatar);
    }
  }, [user]);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setAvatarFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };


  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!user) return;

    startTransition(async () => {
      try {
        let newAvatarUrl = user.avatar;
        if (avatarFile) {
            const formData = new FormData();
            formData.append('image', avatarFile);
            const uploadResult = await uploadImage(formData);
            if (uploadResult.error || !uploadResult.url) {
                throw new Error(uploadResult.error || 'Image upload failed');
            }
            newAvatarUrl = uploadResult.url;
        }

        const userData = { name, phone, shopName, shopAddress, avatar: newAvatarUrl };
        const result = await updateUser(user.id, userData);

        if (result.success) {
          toast({ title: 'Profile Updated!', description: 'Your information has been saved.' });
          await refreshUser(); // Refetch user data from context
        } else {
          throw new Error(result.error);
        }
      } catch (error: any) {
        toast({ title: 'Error', description: error.message || "Failed to update profile.", variant: 'destructive' });
      }
    });
  };

  if (loading || !user) {
    return (
      <div className="container mx-auto py-12">
        <div className="grid md:grid-cols-3 gap-8">
            <motion.div 
              className="md:col-span-1"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
            >
                 <Card>
                    <CardHeader className="items-center text-center">
                        <Skeleton className="h-24 w-24 rounded-full" />
                        <div className="space-y-2 mt-4">
                            <Skeleton className="h-8 w-48" />
                            <Skeleton className="h-5 w-64" />
                        </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <Skeleton className="h-10 w-full" />
                        <Skeleton className="h-10 w-full" />
                    </CardContent>
                </Card>
            </motion.div>
            <motion.div 
              className="md:col-span-2"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
            >
                 <Card>
                    <CardHeader>
                        <Skeleton className="h-8 w-1/3" />
                        <Skeleton className="h-4 w-2/3" />
                    </CardHeader>
                    <CardContent className="space-y-6">
                        <Skeleton className="h-10 w-full" />
                        <Skeleton className="h-10 w-full" />
                        <Skeleton className="h-12 w-full" />
                    </CardContent>
                </Card>
            </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-12">
      <div className="grid md:grid-cols-3 gap-8">
        {/* Profile Display Card */}
        <motion.div 
          className="md:col-span-1"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
        >
            <Card>
                <CardHeader className="items-center text-center p-6">
                    <Avatar className="h-24 w-24 text-4xl mb-4 border-4 border-primary">
                        <AvatarImage src={user.avatar} alt={user.name} data-ai-hint="person avatar" />
                        <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <CardTitle className="font-headline text-2xl">{user.name}</CardTitle>
                    <CardDescription>{user.role === 'seller' ? 'Seller Account' : 'Buyer Account'}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3 px-6 pb-6">
                    <div className="flex items-center gap-4 p-3 rounded-md bg-muted/50 border">
                        <Mail className="h-5 w-5 text-primary" />
                        <span className="text-sm truncate">{user.email}</span>
                    </div>
                    {user.phone && (
                       <div className="flex items-center gap-4 p-3 rounded-md bg-muted/50 border">
                            <Phone className="h-5 w-5 text-primary" />
                            <span className="text-sm">{user.phone}</span>
                       </div>
                    )}
                    {user.role === 'seller' && user.shopName && (
                        <div className="flex items-center gap-4 p-3 rounded-md bg-muted/50 border">
                            <Store className="h-5 w-5 text-primary" />
                            <span className="text-sm">{user.shopName}</span>
                        </div>
                    )}
                    {user.role === 'seller' && user.shopAddress && (
                        <div className="flex items-start gap-4 p-3 rounded-md bg-muted/50 border">
                            <MapPin className="h-5 w-5 text-primary mt-1" />
                            <span className="text-sm">{user.shopAddress}</span>
                        </div>
                    )}
                </CardContent>
            </Card>
        </motion.div>

        {/* Edit Form Card */}
        <motion.div 
          className="md:col-span-2"
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.1 }}
        >
           <Card>
                <CardHeader>
                    <CardTitle>Edit Profile</CardTitle>
                    <CardDescription>Update your personal and shop information here.</CardDescription>
                </CardHeader>
                <CardContent>
                    <form onSubmit={handleSubmit} className="space-y-6">
                        
                         <div className="flex flex-col items-center gap-4">
                            <Label htmlFor="avatar-upload" className="cursor-pointer">
                                <div className="w-32 h-32 rounded-full border-4 border-dashed border-border flex items-center justify-center bg-muted/20 relative group overflow-hidden">
                                {imagePreview ? (
                                    <Image src={imagePreview} alt="Avatar preview" layout="fill" objectFit="cover" className="rounded-full" />
                                ) : (
                                    <div className="text-center text-muted-foreground">
                                        <User className="mx-auto h-12 w-12" />
                                    </div>
                                )}
                                <div className="absolute inset-0 bg-black/50 flex items-center justify-center text-white opacity-0 group-hover:opacity-100 transition-opacity">
                                    <UploadCloud className="h-8 w-8"/>
                                </div>
                                </div>
                            </Label>
                            <Input id="avatar-upload" type="file" accept="image/*" className="hidden" onChange={handleImageChange} disabled={isPending} />
                            <Button type="button" variant="outline" size="sm" onClick={() => document.getElementById('avatar-upload')?.click()} disabled={isPending}>
                                Change Picture
                            </Button>
                         </div>

                         <div>
                            <Label htmlFor="name">Full Name</Label>
                            <Input 
                                id="name" 
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                className="mt-2"
                                disabled={isPending}
                            />
                        </div>
                         <div>
                            <Label htmlFor="phone">Phone Number</Label>
                            <Input 
                                id="phone" 
                                type="tel"
                                value={phone}
                                onChange={(e) => setPhone(e.target.value)}
                                className="mt-2"
                                disabled={isPending}
                            />
                        </div>
                        
                        {user.role === 'seller' && (
                            <>
                                <div>
                                    <Label htmlFor="shopName">Shop Name</Label>
                                    <Input 
                                        id="shopName" 
                                        value={shopName}
                                        onChange={(e) => setShopName(e.target.value)}
                                        className="mt-2"
                                        disabled={isPending}
                                    />
                                </div>
                                <div>
                                    <Label htmlFor="shopAddress">Shop Address</Label>
                                    <Input 
                                        id="shopAddress"
                                        value={shopAddress}
                                        onChange={(e) => setShopAddress(e.target.value)}
                                        className="mt-2"
                                        disabled={isPending}
                                    />
                                </div>
                                {shopAddress && (
                                     <div className="space-y-4">
                                        <Button type="button" variant="outline" onClick={() => setMapPreviewAddress(shopAddress)}>
                                            Preview Map
                                        </Button>
                                        {mapPreviewAddress && <MapCard address={mapPreviewAddress} />}
                                    </div>
                                )}
                            </>
                        )}

                        <Button type="submit" disabled={isPending} className="w-full">
                            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            Save Changes
                        </Button>
                    </form>
                </CardContent>
           </Card>
        </motion.div>
      </div>
    </div>
  );
}


================================================================================
FILE: /src/app/register/page.tsx
================================================================================

'use client';

import { useRouter } from 'next/navigation';
import { useAuth, useLanguage } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { useToast } from '@/hooks/use-toast';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Loader2 } from 'lucide-react';
import { useTransition, useState } from 'react';
import MapCard from '@/components/map-card';
import { motion } from 'framer-motion';

const registerSchema = z.object({
  name: z.string().min(1, { message: "Name is required." }),
  email: z.string().email({ message: "Invalid email address." }),
  phone: z.string().min(1, { message: "Phone number is required." }),
  password: z.string().min(6, { message: "Password must be at least 6 characters." }),
  role: z.enum(['buyer', 'seller'], { required_error: "You must select an account type."}),
  shopName: z.string().optional(),
  shopAddress: z.string().optional(),
}).refine(data => {
  if (data.role === 'seller') {
    return !!data.shopName && !!data.shopAddress;
  }
  return true;
}, {
  message: "Shop name and address are required for sellers.",
  path: ["shopAddress"],
});


type RegisterFormValues = z.infer<typeof registerSchema>;

export default function RegisterPage() {
  const { register } = useAuth();
  const { t } = useLanguage();
  const router = useRouter();
  const { toast } = useToast();
  const [isPending, startTransition] = useTransition();
  const [mapAddress, setMapAddress] = useState('');

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      name: '',
      email: '',
      phone: '',
      password: '',
      role: 'buyer',
      shopName: '',
      shopAddress: '',
    },
  });

  const role = form.watch('role');
  const shopAddressValue = form.watch('shopAddress');

  const handleSubmit = (data: RegisterFormValues) => {
    startTransition(async () => {
      const sellerDetails = data.role === 'seller' ? { shopName: data.shopName!, shopAddress: data.shopAddress! } : undefined;
      const success = await register(data.name, data.email, data.phone, data.password, data.role, sellerDetails);
      
      if (success) {
        toast({ title: "Registration successful!", description: "Welcome! You are now logged in." });
        router.push('/');
      }
    });
  };

  return (
    <motion.div 
      className="container flex items-center justify-center py-12"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">{t('register')}</CardTitle>
          <CardDescription>Create an account to start your journey.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
              <FormField control={form.control} name="name" render={({ field }) => ( <FormItem><FormLabel>Name</FormLabel><FormControl><Input placeholder="John Doe" {...field} disabled={isPending} /></FormControl><FormMessage /></FormItem> )} />
              <FormField control={form.control} name="email" render={({ field }) => ( <FormItem><FormLabel>Email</FormLabel><FormControl><Input type="email" placeholder="m@example.com" {...field} disabled={isPending}/></FormControl><FormMessage /></FormItem> )} />
              <FormField control={form.control} name="phone" render={({ field }) => ( <FormItem><FormLabel>Phone Number</FormLabel><FormControl><Input type="tel" placeholder="01..." {...field} disabled={isPending}/></FormControl><FormMessage /></FormItem> )} />
              <FormField control={form.control} name="password" render={({ field }) => ( <FormItem><FormLabel>Password</FormLabel><FormControl><Input type="password" {...field} disabled={isPending}/></FormControl><FormMessage /></FormItem> )} />
              <FormField control={form.control} name="role" render={({ field }) => ( <FormItem className="space-y-2"><FormLabel>Account Type</FormLabel><FormControl><RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex space-x-4 pt-2" disabled={isPending}><FormItem className="flex items-center space-x-2"><FormControl><RadioGroupItem value="buyer" /></FormControl><FormLabel className="font-normal">Buyer</FormLabel></FormItem><FormItem className="flex items-center space-x-2"><FormControl><RadioGroupItem value="seller" /></FormControl><FormLabel className="font-normal">Seller</FormLabel></FormItem></RadioGroup></FormControl><FormMessage /></FormItem> )} />
              
              {role === 'seller' && (
                <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} className="overflow-hidden space-y-4">
                  <FormField control={form.control} name="shopName" render={({ field }) => ( <FormItem><FormLabel>Shop Name</FormLabel><FormControl><Input placeholder="e.g. Burger Queen" {...field} disabled={isPending}/></FormControl><FormMessage /></FormItem> )} />
                  <FormField control={form.control} name="shopAddress" render={({ field }) => ( <FormItem><FormLabel>Shop Address</FormLabel><FormControl><Input placeholder="123 Main St, Dhaka" {...field} disabled={isPending}/></FormControl><FormMessage /></FormItem> )} />
                   {shopAddressValue && (
                     <div className="space-y-4">
                        <Button type="button" variant="outline" size="sm" onClick={() => setMapAddress(shopAddressValue)}>Preview Map</Button>
                        {mapAddress && <MapCard address={mapAddress} />}
                     </div>
                   )}
                </motion.div>
              )}
              
              <Button type="submit" className="w-full" disabled={isPending}>
                 {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                 {isPending ? "Creating Account..." : t('register')}
              </Button>
            </form>
          </Form>
          <div className="mt-4 text-center text-sm">
            Already have an account?{" "}
            <Link href="/login" className="underline hover:text-primary">
              {t('login')}
            </Link>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}


================================================================================
FILE: /src/app/seller/[id]/page.tsx
================================================================================

'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { notFound } from 'next/navigation';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import ProductCard from '@/components/product-card';
import { MapPin } from 'lucide-react';
import { getProductsBySeller } from '@/lib/services/product-service';
import { getUserById } from '@/lib/services/user-service';
import type { Product, User } from '@/types';
import { Skeleton } from '@/components/ui/skeleton';
import MapCard from '@/components/map-card';

export default function SellerProfilePage({ params }: { params: { id: string } }) {
  const [seller, setSeller] = useState<User | null>(null);
  const [sellerProducts, setSellerProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSellerData = async () => {
      setLoading(true);
      try {
        const fetchedSeller = await getUserById(params.id);
        if (fetchedSeller && fetchedSeller.role === 'seller') {
          setSeller(fetchedSeller);
          const products = await getProductsBySeller(fetchedSeller.id);
          setSellerProducts(products);
        } else {
          notFound();
        }
      } catch (error) {
        console.error("Failed to fetch seller data:", error);
        notFound();
      } finally {
        setLoading(false);
      }
    };

    fetchSellerData();
  }, [params.id]);
  
  if (loading) {
      return (
          <div className="container mx-auto py-12">
            <div className="flex flex-col items-center md:flex-row md:items-start gap-8 mb-12">
                <Skeleton className="h-32 w-32 rounded-full" />
                <div className="text-center md:text-left space-y-2">
                    <Skeleton className="h-10 w-64" />
                    <Skeleton className="h-6 w-32" />
                    <Skeleton className="h-5 w-48" />
                </div>
            </div>
            <Skeleton className="h-8 w-1/3 mb-8" />
             <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {[...Array(4)].map((_, i) => (
                    <div key={i} className="flex flex-col space-y-3">
                        <Skeleton className="h-[200px] w-full rounded-xl" />
                        <div className="space-y-2">
                            <Skeleton className="h-4 w-full" />
                            <Skeleton className="h-4 w-2/3" />
                        </div>
                    </div>
                ))}
             </div>
          </div>
      )
  }

  if (!seller) {
    notFound();
  }

  return (
    <div className="container mx-auto py-12">
      <div className="flex flex-col items-center md:flex-row md:items-start gap-8 mb-12">
        <Avatar className="h-32 w-32 border-4 border-primary">
          <AvatarImage src={seller.avatar} alt={seller.name} data-ai-hint="person avatar" />
          <AvatarFallback className="text-4xl">{seller.name.charAt(0)}</AvatarFallback>
        </Avatar>
        <div className="text-center md:text-left">
          <h1 className="font-headline text-4xl font-bold text-primary">{seller.shopName}</h1>
          <p className="text-lg text-muted-foreground">by {seller.name}</p>
          {seller.shopAddress && (
            <div className="flex items-center justify-center md:justify-start gap-2 mt-2 text-muted-foreground">
              <MapPin className="h-4 w-4" />
              <span>{seller.shopAddress}</span>
            </div>
          )}
        </div>
      </div>
      
      {seller.shopAddress && (
        <div className="mb-12">
            <h2 className="font-headline text-3xl font-bold mb-8 text-center md:text-left">
                Our Location
            </h2>
            <MapCard address={seller.shopAddress} />
        </div>
      )}

      <h2 className="font-headline text-3xl font-bold mb-8 text-center md:text-left">
        All Products from {seller.shopName}
      </h2>

      {sellerProducts.length > 0 ? (
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {sellerProducts.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>
      ) : (
        <div className="text-center py-20">
          <p className="text-lg text-muted-foreground">{seller.name} has not added any products yet.</p>
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: /src/app/sellers/page.tsx
================================================================================

'use client';

import { useState, useEffect } from 'react';
import type { User } from '@/types';
import { getAllSellers } from '@/lib/services/user-service';
import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { MapPin, ShoppingBag, Star } from 'lucide-react';

export default function SellersPage() {
  const [sellers, setSellers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSellers = async () => {
      try {
        const fetchedSellers = await getAllSellers();
        // Sort sellers: 'pro' plan first, then by product count descending
        fetchedSellers.sort((a, b) => {
          if (a.planType === 'pro' && b.planType !== 'pro') return -1;
          if (a.planType !== 'pro' && b.planType === 'pro') return 1;
          return (b.productUploadCount || 0) - (a.productUploadCount || 0);
        });
        setSellers(fetchedSellers);
      } catch (error) {
        console.error("Failed to fetch sellers:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchSellers();
  }, []);

  const SellerSkeleton = () => (
    <div className="flex flex-col space-y-3">
        <Skeleton className="h-[150px] w-full rounded-xl" />
        <div className="space-y-2">
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-4 w-1/2" />
        </div>
    </div>
  );

  return (
    <div className="container mx-auto py-12">
      <div className="text-center mb-12">
        <h1 className="font-headline text-4xl font-bold text-primary">Our Sellers</h1>
        <p className="text-muted-foreground mt-2 max-w-2xl mx-auto">Meet the talented chefs and kitchens bringing you the best local flavors.</p>
      </div>

      {loading ? (
         <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {[...Array(6)].map((_, i) => <SellerSkeleton key={i} />)}
         </div>
      ) : sellers.length > 0 ? (
        <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {sellers.map((seller, index) => (
            <motion.div
              key={seller.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
            >
              <Link href={`/seller/${seller.id}`} className="block group">
                <Card className="h-full transition-all duration-300 hover:border-primary hover:shadow-lg hover:-translate-y-1">
                  <CardHeader className="flex-row items-center gap-4">
                    <Avatar className="h-16 w-16 border-2 border-primary/50">
                      <AvatarImage src={seller.avatar} alt={seller.shopName} data-ai-hint="person avatar"/>
                      <AvatarFallback>{seller.shopName?.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <CardTitle className="font-headline text-xl group-hover:text-primary transition-colors">{seller.shopName}</CardTitle>
                      <p className="text-sm text-muted-foreground">by {seller.name}</p>
                    </div>
                    {seller.planType === 'pro' && (
                        <div className="absolute top-3 right-3 flex items-center gap-1 rounded-full bg-primary/10 px-2 py-1 text-xs font-bold text-primary border border-primary/20">
                            <Star className="h-3 w-3" />
                            <span>PRO</span>
                        </div>
                    )}
                  </CardHeader>
                  <CardContent className="space-y-2">
                    {seller.shopAddress && (
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <MapPin className="h-4 w-4" />
                            <span>{seller.shopAddress}</span>
                        </div>
                    )}
                     <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <ShoppingBag className="h-4 w-4" />
                        <span>{seller.productUploadCount || 0} products</span>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            </motion.div>
          ))}
        </div>
      ) : (
        <div className="py-20 text-center">
          <p className="text-lg text-muted-foreground">No sellers found.</p>
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: /src/components/category-showcase.tsx
================================================================================

'use client';

import Link from 'next/link';
import { Sparkles } from 'lucide-react';
import Image from 'next/image';
import { Card } from './ui/card';
import { motion } from 'framer-motion';
import { categories } from '@/lib/data';

export default function CategoryShowcase() {
  
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  return (
    <section 
      className="bg-secondary/30 py-16 md:py-24"
    >
      <div className="container mx-auto">
        <div className="text-center mb-12">
            <div className="inline-block relative">
              <h2 className="font-headline text-3xl font-extrabold md:text-5xl text-shadow-lg text-foreground pb-2">
                <Sparkles className="h-6 w-6 md:h-8 md:w-8 text-primary inline-block mr-4 mb-2" />
                  Shop By Category
                <Sparkles className="h-6 w-6 md:h-8 md:w-8 text-primary inline-block ml-4 mb-2" />
              </h2>
            </div>
            <p className="text-muted-foreground mt-2 max-w-2xl mx-auto">Click on a category to explore delicious options from our best kitchens.</p>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 md:gap-6">
          {categories.map((category, index) => (
             <motion.div
              key={category.name}
              variants={cardVariants}
              initial="hidden"
              whileInView="visible"
              transition={{ duration: 0.5, delay: index * 0.1 }}
              viewport={{ once: true }}
            >
              <Link href={`/products?category=${category.name}`} className="group block">
                <Card className="overflow-hidden text-center transition-all duration-300 hover:shadow-primary/20 hover:-translate-y-1">
                    <div className="aspect-square relative overflow-hidden">
                        <Image
                            src={category.image}
                            alt={category.name}
                            width={400}
                            height={400}
                            className="w-full h-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-110"
                            data-ai-hint={category.hint}
                        />
                    </div>
                    <div className="p-4 bg-card">
                        <h3 className="font-headline text-xl font-bold text-foreground group-hover:text-primary transition-colors">{category.name}</h3>
                    </div>
                </Card>
              </Link>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: /src/components/featured-products.tsx
================================================================================

'use client';

import { getProducts } from '@/lib/services/product-service';
import ProductCard from './product-card';
import { ShoppingBag } from 'lucide-react';
import { useEffect, useState } from 'react';
import type { Product } from '@/types';
import { Skeleton } from './ui/skeleton';
import { motion } from 'framer-motion';

export default function FeaturedProducts() {
  const [featuredProducts, setFeaturedProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const allProducts = await getProducts();
        // Sort products by rating in descending order. Ensure rating is a number.
        const sortedProducts = allProducts
          .sort((a, b) => (b.rating || 0) - (a.rating || 0))
          .slice(0, 4);
        setFeaturedProducts(sortedProducts);
      } catch (error) {
        console.error("Failed to fetch featured products:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchProducts();
  }, []);

  const ProductSkeleton = () => (
    <div className="flex flex-col space-y-3">
        <Skeleton className="h-[200px] w-full rounded-xl" />
        <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-2/3" />
        </div>
    </div>
  );

  return (
    <motion.section 
      className="bg-background py-16 md:py-24"
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true, amount: 0.2 }}
      transition={{ duration: 0.8, ease: "easeOut" }}
    >
      <div className="container mx-auto">
        <div className="text-center mb-12">
            <div className="inline-block relative">
              <h2 className="font-headline text-3xl font-extrabold md:text-5xl text-shadow-lg bg-gradient-to-r from-primary to-blue-400 text-transparent bg-clip-text pb-2">
                <ShoppingBag className="h-6 w-6 md:h-8 md:w-8 text-primary inline-block mr-4 mb-2" />
                  Featured Products
                <ShoppingBag className="h-6 w-6 md:h-8 md:w-8 text-primary inline-block ml-4 mb-2" />
              </h2>
            </div>
            <p className="text-muted-foreground mt-2 max-w-2xl mx-auto">Discover our most loved and highest-rated dishes.</p>
        </div>
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
          {loading ? (
            [...Array(4)].map((_, i) => <ProductSkeleton key={i} />)
          ) : (
            featuredProducts.map((product) => (
              <ProductCard key={product.id} product={product} />
            ))
          )}
        </div>
      </div>
    </motion.section>
  );
}


================================================================================
FILE: /src/components/featured-sellers.tsx
================================================================================

'use client';

import { getAllSellers } from '@/lib/services/user-service';
import SellerCard from './seller-card';
import { ChefHat } from 'lucide-react';
import { useEffect, useState } from 'react';
import type { User } from '@/types';
import { Skeleton } from './ui/skeleton';
import { motion } from 'framer-motion';

export default function FeaturedSellers() {
  const [featuredSellers, setFeaturedSellers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSellers = async () => {
      try {
        const allSellers = await getAllSellers();
        // Sort to show 'pro' sellers first, then limit to 3
        const sortedSellers = allSellers
          .sort((a, b) => {
            if (a.planType === 'pro' && b.planType !== 'pro') return -1;
            if (a.planType !== 'pro' && b.planType === 'pro') return 1;
            return 0;
          })
          .slice(0, 3);
        setFeaturedSellers(sortedSellers);
      } catch (error) {
        console.error("Failed to fetch featured sellers:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchSellers();
  }, []);

  const SellerSkeleton = () => (
    <div className="flex flex-col space-y-3">
        <Skeleton className="h-[120px] w-full rounded-xl" />
        <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-2/3" />
        </div>
    </div>
  );

  return (
    <motion.section 
      className="bg-secondary/30 py-16 md:py-24"
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true, amount: 0.2 }}
      transition={{ duration: 0.8, ease: "easeOut" }}
    >
      <div className="container mx-auto">
        <div className="text-center mb-12">
            <div className="inline-block relative">
              <h2 className="font-headline text-3xl font-extrabold md:text-5xl text-shadow-lg text-foreground pb-2">
                <ChefHat className="h-6 w-6 md:h-8 md:w-8 text-primary inline-block mr-4 mb-2" />
                  Our Top Kitchens
                <ChefHat className="h-6 w-6 md:h-8 md:w-8 text-primary inline-block ml-4 mb-2" />
              </h2>
            </div>
            <p className="text-muted-foreground mt-2 max-w-2xl mx-auto">Discover the amazing chefs behind your favorite meals.</p>
        </div>
        <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
          {loading ? (
            [...Array(3)].map((_, i) => <SellerSkeleton key={i} />)
          ) : (
            featuredSellers.map((seller) => (
              <SellerCard key={seller.id} seller={seller} />
            ))
          )}
        </div>
      </div>
    </motion.section>
  );
}


================================================================================
FILE: /src/components/hero-section.tsx
================================================================================
'use client';

import { useLanguage } from '@/lib/hooks';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { motion } from 'framer-motion';

export default function HeroSection() {
  const { t } = useLanguage();

  return (
    <section className="relative w-full bg-background overflow-hidden">
      <div className="container mx-auto grid grid-cols-1 items-center py-20 md:py-32 text-center">
        <motion.div 
          className="relative z-10"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
        >
          <h1 className="font-headline text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl lg:text-7xl text-shadow text-foreground">
            {t('heroTitle')}
          </h1>
          <p className="mx-auto mt-6 max-w-[600px] text-muted-foreground md:text-xl">
            {t('heroSubtitle')}
          </p>
          <motion.div 
            className="mt-10"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Button asChild size="lg" className="rounded-full shadow-lg hover:shadow-primary/30 transition-shadow duration-300 px-10 py-6 text-lg font-bold">
              <Link href="/products">{t('browseProducts')}</Link>
            </Button>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
}


================================================================================
FILE: /src/components/language-switcher.tsx
================================================================================

'use client';

import { useLanguage } from '@/lib/hooks';
import { Button } from '@/components/ui/button';

export default function LanguageSwitcher() {
  const { language, toggleLanguage } = useLanguage();

  return (
    <Button variant="ghost" size="icon" onClick={toggleLanguage}>
      <span className="text-lg">{language === 'en' ? '🇧🇩' : '🇬🇧'}</span>
      <span className="sr-only">
        {language === 'en' ? 'Switch to Bengali' : 'Switch to English'}
      </span>
    </Button>
  );
}


================================================================================
FILE: /src/components/layout/footer.tsx
================================================================================
'use client';

import { useLanguage } from '@/lib/hooks';
import Link from 'next/link';
import { CookingPot, Twitter, Instagram, Facebook } from 'lucide-react';
import { motion } from 'framer-motion';

export default function Footer() {
  const { t } = useLanguage();

  return (
    <footer className="border-t bg-card">
      <div className="container mx-auto py-12 md:py-16">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 text-center md:text-left">
            <div className="flex flex-col items-center md:items-start">
                 <Link href="/" className="mb-4 flex items-center space-x-2">
                    <CookingPot className="h-8 w-8 text-primary" />
                    <span className="font-bold font-headline text-2xl text-primary tracking-wide">{t('appName')}</span>
                </Link>
                <p className="text-sm text-muted-foreground max-w-xs">{t('heroSubtitle')}</p>
                <div className="flex gap-4 mt-6">
                    <motion.a href="#" whileHover={{ scale: 1.2, color: 'hsl(var(--primary))' }} className="text-muted-foreground"><Twitter /></motion.a>
                    <motion.a href="#" whileHover={{ scale: 1.2, color: 'hsl(var(--primary))' }} className="text-muted-foreground"><Instagram /></motion.a>
                    <motion.a href="#" whileHover={{ scale: 1.2, color: 'hsl(var(--primary))' }} className="text-muted-foreground"><Facebook /></motion.a>
                </div>
            </div>
            <div>
                <h4 className="font-semibold mb-4 text-foreground">Quick Links</h4>
                <ul className="space-y-2">
                    <li><Link href="/products" className="text-sm text-muted-foreground hover:text-primary">Products</Link></li>
                    <li><Link href="/cart" className="text-sm text-muted-foreground hover:text-primary">My Cart</Link></li>
                    <li><Link href="/register" className="text-sm text-muted-foreground hover:text-primary">Become a Seller</Link></li>
                </ul>
            </div>
            <div>
                <h4 className="font-semibold mb-4 text-foreground">Support</h4>
                <ul className="space-y-2">
                    <li><Link href="#" className="text-sm text-muted-foreground hover:text-primary">FAQ</Link></li>
                    <li><Link href="#" className="text-sm text-muted-foreground hover:text-primary">Contact Us</Link></li>
                </ul>
            </div>
             <div>
                <h4 className="font-semibold mb-4 text-foreground">Legal</h4>
                <ul className="space-y-2">
                    <li><Link href="#" className="text-sm text-muted-foreground hover:text-primary">Privacy Policy</Link></li>
                    <li><Link href="#" className="text-sm text-muted-foreground hover:text-primary">Terms of Service</Link></li>
                </ul>
            </div>
        </div>
        <div className="mt-12 border-t pt-8 text-center text-sm text-muted-foreground">
            &copy; {new Date().getFullYear()} {t('appName')}. All rights reserved.
        </div>
      </div>
    </footer>
  );
}


================================================================================
FILE: /src/components/layout/header.tsx
================================================================================

'use client';

import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { useAuth, useCart, useLanguage } from '@/lib/hooks';
import { Badge } from '@/components/ui/badge';
import { CookingPot, ShoppingCart, User as UserIcon, Bell, Menu, LogIn, UserPlus, Search } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { useState, useEffect } from 'react';
import { formatDistanceToNow } from 'date-fns';
import { db } from '@/firebase';
import { collection, query, where, onSnapshot, orderBy, doc, writeBatch } from 'firebase/firestore';
import type { Notification } from '@/types';
import { motion } from 'framer-motion';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"


export default function Header() {
  const { isAuthenticated, user, logout, loading } = useAuth();
  const { cartCount } = useCart();
  const { t } = useLanguage();
  const router = useRouter();
  const pathname = usePathname();
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const navLinks = [
    { href: '/', label: t('home') },
    { href: '/products', label: t('products') },
    { href: '/sellers', label: 'Sellers' },
    { href: '/orders', label: t('previousOrders'), roles: ['buyer'] },
    { href: '/dashboard', label: t('dashboard'), roles: ['seller'] },
  ];

  useEffect(() => {
    if (!user) {
      setNotifications([]);
      setUnreadCount(0);
      return;
    }

    const q = query(
      collection(db, "notifications"),
      where("userId", "==", user.id),
      orderBy("createdAt", "desc")
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const notifs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Notification));
      setNotifications(notifs);
      setUnreadCount(notifs.filter(n => !n.isRead).length);
    });

    return () => unsubscribe();
  }, [user]);

  const handleLogout = async () => {
    await logout();
    router.push('/');
  }

  const markAllAsRead = async () => {
    if (!user || unreadCount === 0) return;
    const batch = writeBatch(db);
    notifications.forEach(notification => {
        if (!notification.isRead) {
            const notifRef = doc(db, 'notifications', notification.id);
            batch.update(notifRef, { isRead: true });
        }
    });
    await batch.commit();
  };
  
  const getNotificationLink = (notification: Notification) => {
      if (notification.type === 'order-status' && notification.orderId) return '/orders';
      if (notification.type === 'new-product' && notification.productId) return `/product/${notification.productId}`;
      if (notification.type === 'new-order' && user?.role === 'seller') return '/dashboard';
      return '#';
  }

  const MotionLink = motion(Link);

  return (
    <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur-sm">
      <div className="container flex h-16 items-center justify-between">
        <MotionLink 
          href="/" 
          className="flex items-center space-x-2"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <CookingPot className="h-8 w-8 text-primary" />
          <span className="font-bold font-headline text-xl tracking-wide">{t('appName')}</span>
        </MotionLink>

        {/* Desktop Nav */}
        <nav className="hidden md:flex flex-1 items-center justify-center gap-2">
          {navLinks.map((link) => {
            const showLink = !link.roles || (isAuthenticated && user && link.roles.includes(user.role));
            if (!showLink) return null;
            const isActive = pathname === link.href;
            return (
              <MotionLink
                key={link.href}
                href={link.href}
                className={`relative rounded-full px-4 py-2 text-sm font-medium transition-colors hover:text-primary ${
                  isActive ? 'text-primary' : 'text-muted-foreground'
                }`}
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.95 }}
              >
                {link.label}
                {isActive && (
                  <motion.div
                    className="absolute inset-0 -z-10 rounded-full bg-muted"
                    layoutId="active-nav-pill"
                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                  />
                )}
              </MotionLink>
            );
          })}
        </nav>
        
        <div className="flex items-center gap-2">
          
          <motion.div
            whileTap={{ scale: 0.9 }}
            className='md:hidden'
          >
             <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>
              <SheetTrigger asChild>
                 <Button variant="ghost" size="icon">
                    <Menu />
                    <span className="sr-only">Toggle Menu</span>
                  </Button>
              </SheetTrigger>
              <SheetContent side="left">
                <SheetHeader>
                   <SheetTitle className='flex items-center gap-2'>
                      <CookingPot className="h-6 w-6 text-primary" />
                      <span>{t('appName')}</span>
                   </SheetTitle>
                </SheetHeader>
                 <nav className="flex flex-col items-start gap-4 py-8">
                    {navLinks.map((link) => {
                      const showLink = !link.roles || (isAuthenticated && user && link.roles.includes(user.role));
                      if (!showLink) return null;
                      return (
                        <Link
                          key={link.href}
                          href={link.href}
                          className={`text-lg ${pathname === link.href ? 'text-primary' : 'text-muted-foreground'}`}
                          onClick={() => setIsMenuOpen(false)}
                        >
                          {link.label}
                        </Link>
                      );
                    })}
                  </nav>
                  {loading ? null : isAuthenticated && user ? (
                    <div className="mt-auto">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                           <Button variant="ghost" className="w-full justify-start gap-2">
                              <UserIcon className="h-5 w-5" />
                              <span>{user.name}</span>
                           </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>{user.name}</DropdownMenuLabel>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem asChild><Link href="/profile">My Profile</Link></DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem onClick={handleLogout}>{t('logout')}</DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  ) : (
                    <div className="mt-auto flex flex-col gap-2">
                      <Button asChild variant="outline"><Link href="/login"><LogIn className="mr-2"/>{t('login')}</Link></Button>
                      <Button asChild><Link href="/register"><UserPlus className="mr-2"/>{t('register')}</Link></Button>
                    </div>
                  )}
              </SheetContent>
            </Sheet>
          </motion.div>

          {isAuthenticated && user && (
            <Popover>
              <PopoverTrigger asChild>
                  <motion.button className="relative rounded-full p-2 transition-colors hover:bg-accent" whileTap={{ scale: 0.9 }}>
                      <Bell className="h-5 w-5" />
                      {unreadCount > 0 && (
                           <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 justify-center rounded-full p-0 text-xs border-2 border-background">
                              {unreadCount}
                           </Badge>
                      )}
                      <span className="sr-only">Notifications</span>
                  </motion.button>
              </PopoverTrigger>
               <PopoverContent align="end" className="w-80">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium">Notifications</h4>
                    {unreadCount > 0 && <Button variant="link" size="sm" onClick={markAllAsRead}>Mark all as read</Button>}
                  </div>
                  <div className="space-y-2 max-h-80 overflow-y-auto">
                    {notifications.length > 0 ? (
                      notifications.map(notif => (
                        <Link key={notif.id} href={getNotificationLink(notif)} className={`block p-2 rounded-md hover:bg-accent ${!notif.isRead && 'bg-primary/10'}`}>
                          <p className="text-sm">{notif.message}</p>
                          <p className="text-xs text-muted-foreground">{formatDistanceToNow(notif.createdAt.toDate(), { addSuffix: true })}</p>
                        </Link>
                      ))
                    ) : <p className="text-sm text-muted-foreground text-center py-4">No notifications yet.</p>}
                  </div>
              </PopoverContent>
            </Popover>
          )}

          <motion.a href="/sellers" className="relative rounded-full p-2 transition-colors hover:bg-accent" whileTap={{ scale: 0.9 }} title="Find Sellers">
            <Search className="h-5 w-5" />
            <span className="sr-only">Find Sellers</span>
          </motion.a>

          <motion.a href="/cart" className="relative rounded-full p-2 transition-colors hover:bg-accent" whileTap={{ scale: 0.9 }}>
            <ShoppingCart className="h-5 w-5" />
            {cartCount > 0 && (
              <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 justify-center rounded-full p-0 text-xs border-2 border-background">
                {cartCount}
              </Badge>
            )}
            <span className="sr-only">{t('cart')}</span>
          </motion.a>

          {loading ? null : isAuthenticated && user ? (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                 <motion.button className="relative hidden sm:inline-flex rounded-full p-2 transition-colors hover:bg-accent" whileTap={{ scale: 0.9 }}>
                    <UserIcon className="h-5 w-5" />
                    <span className="sr-only">User Menu</span>
                 </motion.button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>{user.name}</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem asChild><Link href="/profile">My Profile</Link></DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleLogout}>{t('logout')}</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          ) : (
            <div className="hidden sm:flex items-center gap-2">
               <Button asChild variant="ghost"><Link href="/login"><LogIn className="mr-2"/>{t('login')}</Link></Button>
               <Button asChild><Link href="/register"><UserPlus className="mr-2"/>{t('register')}</Link></Button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}


================================================================================
FILE: /src/components/layout/sidebar.tsx
================================================================================

'use client';

import { useAuth, useLanguage } from '@/lib/hooks';
import { usePathname } from 'next/navigation';
import {
  Sidebar,
  SidebarContent,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarFooter,
} from '@/components/ui/sidebar';
import Link from 'next/link';
import { CookingPot, Home, LayoutDashboard, History, ShoppingBag, User } from 'lucide-react';
import LanguageSwitcher from '../language-switcher';

export default function AppSidebar() {
  const { isAuthenticated, user } = useAuth();
  const { t } = useLanguage();
  const pathname = usePathname();

  const navLinks = [
    { href: '/', label: t('home'), icon: Home, roles: ['buyer', 'seller'] },
    { href: '/products', label: t('products'), icon: ShoppingBag, roles: ['buyer', 'seller'] },
    { href: '/orders', label: t('previousOrders'), icon: History, roles: ['buyer'] },
    { href: '/dashboard', label: t('dashboard'), icon: LayoutDashboard, roles: ['seller'] },
    { href: '/profile', label: t('profile'), icon: User, roles: ['buyer', 'seller'] },
  ];

  const isActive = (href: string) => {
    if (href === '/') return pathname === '/';
    return pathname.startsWith(href);
  };

  return (
    <Sidebar>
      <SidebarHeader>
        <Link href="/" className="flex items-center gap-2.5">
          <div className="bg-primary text-primary-foreground p-2 rounded-lg">
            <CookingPot className="h-6 w-6" />
          </div>
          <span className="font-bold text-lg font-headline text-sidebar-foreground">
            {t('appName')}
          </span>
        </Link>
      </SidebarHeader>

      <SidebarContent>
        <SidebarMenu>
          {navLinks.map((link) => {
            if (isAuthenticated && user && link.roles.includes(user.role)) {
              const Icon = link.icon;
              return (
                <SidebarMenuItem key={link.href}>
                  <Link href={link.href} passHref legacyBehavior>
                    <SidebarMenuButton
                      asChild
                      isActive={isActive(link.href)}
                      tooltip={link.label}
                    >
                      <a>
                        <Icon />
                        <span>{link.label}</span>
                      </a>
                    </SidebarMenuButton>
                  </Link>
                </SidebarMenuItem>
              );
            }
            // Show Home and Products for logged-out users
            if (!isAuthenticated && (link.href === '/' || link.href === '/products')) {
                 const Icon = link.icon;
                 return (
                    <SidebarMenuItem key={link.href}>
                        <Link href={link.href} passHref legacyBehavior>
                            <SidebarMenuButton
                            asChild
                            isActive={isActive(link.href)}
                            tooltip={link.label}
                            >
                            <a>
                                <Icon />
                                <span>{link.label}</span>
                            </a>
                            </SidebarMenuButton>
                        </Link>
                    </SidebarMenuItem>
                 )
            }
            return null;
          })}
        </SidebarMenu>
      </SidebarContent>

      <SidebarFooter>
        <LanguageSwitcher />
      </SidebarFooter>
    </Sidebar>
  );
}


================================================================================
FILE: /src/components/map-card.tsx
================================================================================

'use client';

import { Card } from './ui/card';

interface MapCardProps {
  address: string;
}

export default function MapCard({ address }: MapCardProps) {
  // Increased zoom level from 13 to 15 for a closer view.
  // Using iwloc=B places a marker at the location.
  const mapSrc = `https://maps.google.com/maps?q=${encodeURIComponent(
    address
  )}&t=&z=15&ie=UTF8&iwloc=B&output=embed`;

  return (
    <Card className="overflow-hidden relative aspect-video md:aspect-[2.4/1] w-full border-4 border-primary/20 shadow-lg">
      <iframe
        width="100%"
        height="100%"
        frameBorder="0"
        scrolling="no"
        marginHeight={0}
        marginWidth={0}
        src={mapSrc}
        title={`Map of ${address}`}
        aria-label={`Map of ${address}`}
      ></iframe>
    </Card>
  );
}


================================================================================
FILE: /src/components/product-card.tsx
================================================================================

'use client';

import Image from 'next/image';
import Link from 'next/link';
import type { Product } from '@/types';
import { useCart } from '@/lib/hooks';
import { useLanguage } from '@/lib/hooks';
import RatingStars from './rating-stars';
import { useToast } from '@/hooks/use-toast';
import { ShoppingCart, Clock, BadgeAlert } from 'lucide-react';
import { motion } from 'framer-motion';
import { Button } from './ui/button';
import { Card } from './ui/card';

interface ProductCardProps {
  product: Product;
}

export default function ProductCard({ product }: ProductCardProps) {
  const { addToCart } = useCart();
  const { t } = useLanguage();
  const { toast } = useToast();

  const handleAddToCart = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    addToCart(product);
    toast({
      title: `${product.name} added to cart!`,
    });
  };

  const isAvailable = product.isAvailable ?? true;

  return (
    <Card className="group relative overflow-hidden rounded-lg border-border/20 transition-all duration-300 h-full flex flex-col hover:border-primary/50 hover:shadow-lg hover:-translate-y-1">
      <Link href={`/product/${product.id}`} className="block">
        <div className="overflow-hidden aspect-[4/3] relative">
          <Image
            src={product.image}
            alt={product.name}
            width={600}
            height={400}
            className="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
            data-ai-hint={`${product.category}`}
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />
           {!isAvailable && (
            <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
              <span className="text-white font-bold text-lg bg-black/70 px-4 py-2 rounded-md">Out of Stock</span>
            </div>
          )}
        </div>
      </Link>
      <div className="p-4 space-y-3 flex flex-col flex-grow">
        <div className="flex-grow">
          <h3 className="font-headline text-lg font-bold leading-tight text-foreground">
            <Link href={`/product/${product.id}`} className="hover:text-primary transition-colors stretched-link">{product.name}</Link>
          </h3>
          <p className="mt-1 text-sm text-muted-foreground h-10 overflow-hidden text-ellipsis">
            {product.description}
          </p>
        </div>
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center">
            <RatingStars rating={product.rating} />
            <span className="ml-2 text-xs text-muted-foreground">({product.rating.toFixed(1)})</span>
          </div>
          <div className="flex items-center gap-1 text-xs text-muted-foreground">
             <Clock className="h-3 w-3" />
             <span>{product.deliveryTime}</span>
          </div>
        </div>
        <div className="flex items-center justify-between pt-2">
          <div className="text-2xl font-bold text-primary whitespace-nowrap">৳{product.price.toFixed(2)}</div>
           <Button 
              onClick={handleAddToCart} 
              size="sm"
              disabled={!isAvailable}
            >
              {isAvailable ? <>
                  <ShoppingCart className="h-4 w-4" />
                  <span className="ml-2 text-sm font-semibold">{t('addToCart')}</span>
              </> : <>
                  <BadgeAlert className="h-4 w-4" />
                  <span className="ml-2 text-sm font-semibold">Unavailable</span>
              </>}
          </Button>
        </div>
      </div>
    </Card>
  );
}


================================================================================
FILE: /src/components/product-list.tsx
================================================================================

'use client';

import { useState, useMemo, useEffect } from 'react';
import type { Product, User } from '@/types';
import ProductCard from '@/components/product-card';
import { useLanguage } from '@/lib/hooks';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import RatingInput from '@/components/rating-input';
import { X, Search } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { useSearchParams } from 'next/navigation';
import { Card } from './ui/card';
import SellerCard from './seller-card';
import { AnimatePresence, motion } from 'framer-motion';
import { categories } from '@/lib/data';

const categoryNames = ['All', ...categories.map(c => c.name)];

interface ProductListProps {
  products: Product[];
  allSellers: User[];
}

export default function ProductList({ products, allSellers }: ProductListProps) {
  const { t } = useLanguage();
  const searchParams = useSearchParams();
  const initialCategory = searchParams.get('category') || 'All';
  
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(initialCategory);
  const [minRating, setMinRating] = useState(0);

  useEffect(() => {
    setSelectedCategory(initialCategory);
  }, [initialCategory]);

  const filteredProducts = useMemo(() => {
    return products.filter((product: Product) => {
      const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === 'All' || product.category === selectedCategory;
      const matchesRating = product.rating >= minRating;
      const isAvailable = product.isAvailable ?? true;
      return matchesSearch && matchesCategory && matchesRating && isAvailable;
    });
  }, [products, searchTerm, selectedCategory, minRating]);

  const categorySellers = useMemo(() => {
    if (selectedCategory === 'All') {
      return [];
    }
    const sellerIdsInCategory = new Set(
      products
        .filter(p => p.category === selectedCategory)
        .map(p => p.sellerId)
    );
    return allSellers.filter(seller => sellerIdsInCategory.has(seller.id));
  }, [products, selectedCategory, allSellers]);
  
  const ProductSkeleton = () => (
    <div className="flex flex-col space-y-3">
        <Skeleton className="h-[200px] w-full rounded-xl" />
        <div className="space-y-2">
            <Skeleton className="h-4 w-[250px]" />
            <Skeleton className="h-4 w-[200px]" />
        </div>
    </div>
  );

  return (
    <div className="container mx-auto py-8">
      <div className="text-center mb-8 animated-card">
        <h1 className="font-headline text-4xl font-bold text-primary">
          {selectedCategory === 'All' ? t('allProducts') : `${selectedCategory}`}
        </h1>
        <p className="text-muted-foreground mt-2">Find your next favorite meal from our curated collection.</p>
      </div>
      
      <div className="mb-8 grid grid-cols-1 gap-6 rounded-lg border bg-card p-6 md:grid-cols-3 animated-card" style={{animationDelay: '100ms'}}>
        <div className="relative">
          <Label htmlFor="search">{t('searchPlaceholder')}</Label>
          <Search className="absolute left-3 top-[calc(50%_+_6px)] -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            id="search"
            type="text"
            placeholder={t('searchPlaceholder')}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="mt-2 pl-10"
          />
        </div>
        <div>
          <Label htmlFor="category-select">{t('filterByCategory')}</Label>
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger id="category-select" className="mt-2">
              <SelectValue placeholder={t('filterByCategory')} />
            </SelectTrigger>
            <SelectContent>
              {categoryNames.map((cat) => (
                <SelectItem key={cat} value={cat}>
                  {cat === 'All' ? t('all') : cat}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label>{t('filterByRating')}</Label>
          <div className="mt-2 flex items-center space-x-2">
            <RatingInput value={minRating} onChange={setMinRating} />
            {minRating > 0 && (
                <Button onClick={() => setMinRating(0)} variant="ghost" size="icon" className="h-8 w-8 rounded-full text-muted-foreground hover:text-primary">
                    <X className="h-4 w-4"/>
                    <span className="sr-only">Clear rating</span>
                </Button>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Main content */}
        <div className="lg:col-span-3">
            {filteredProducts.length > 0 ? (
                <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 xl:grid-cols-3">
                {filteredProducts.map((product, index) => (
                    <motion.div 
                        key={product.id} 
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.05 }}
                    >
                    <ProductCard product={product} />
                    </motion.div>
                ))}
                </div>
            ) : (
                <div className="py-20 text-center animated-card">
                <p className="text-lg text-muted-foreground">No products found. Try adjusting your filters.</p>
                </div>
            )}
        </div>

        {/* Sidebar */}
        <aside className="lg:col-span-1">
            <AnimatePresence>
            {categorySellers.length > 0 && (
                <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                    className="sticky top-24"
                >
                    <Card className="p-4">
                        <h2 className="font-headline text-xl font-bold mb-4 text-primary">
                            {selectedCategory} Sellers
                        </h2>
                        <div className="space-y-4">
                            {categorySellers.map(seller => (
                                <SellerCard key={seller.id} seller={seller} />
                            ))}
                        </div>
                    </Card>
                </motion.div>
            )}
            </AnimatePresence>
        </aside>

      </div>
    </div>
  );
}


================================================================================
FILE: /src/components/rating-input.tsx
================================================================================

'use client';

import { useState } from 'react';
import { Star } from 'lucide-react';
import { cn } from '@/lib/utils';

interface RatingInputProps {
  value: number;
  onChange: (value: number) => void;
  maxRating?: number;
  className?: string;
  disabled?: boolean;
}

export default function RatingInput({ value, onChange, maxRating = 5, className, disabled = false }: RatingInputProps) {
  const [hoverValue, setHoverValue] = useState(0);

  return (
    <div className={cn('flex items-center gap-1', disabled && 'opacity-50', className)}>
      {[...Array(maxRating)].map((_, i) => {
        const ratingValue = i + 1;
        return (
          <button
            type="button"
            key={ratingValue}
            onClick={() => !disabled && onChange(ratingValue)}
            onMouseEnter={() => !disabled && setHoverValue(ratingValue)}
            onMouseLeave={() => setHoverValue(0)}
            className={cn("transition-transform duration-150", !disabled && "cursor-pointer hover:scale-110")}
            disabled={disabled}
          >
            <Star
              className={cn(
                'h-6 w-6',
                ratingValue <= (hoverValue || value)
                  ? 'text-yellow-400 fill-yellow-400'
                  : 'text-gray-300'
              )}
            />
            <span className="sr-only">Rate {ratingValue} out of {maxRating}</span>
          </button>
        );
      })}
    </div>
  );
}


================================================================================
FILE: /src/components/rating-stars.tsx
================================================================================
import { Star } from 'lucide-react';
import { cn } from '@/lib/utils';

interface RatingStarsProps {
  rating: number;
  maxRating?: number;
  className?: string;
}

export default function RatingStars({ rating, maxRating = 5, className }: RatingStarsProps) {
  const fullStars = Math.floor(rating);
  const halfStar = rating % 1 !== 0;
  const emptyStars = maxRating - fullStars - (halfStar ? 1 : 0);

  return (
    <div className={cn('flex items-center gap-0.5', className)}>
      {[...Array(fullStars)].map((_, i) => (
        <Star key={`full-${i}`} className="h-4 w-4 text-yellow-400 fill-yellow-400" />
      ))}
      {halfStar && <Star key="half" className="h-4 w-4 text-yellow-400" />} 
      {[...Array(emptyStars)].map((_, i) => (
        <Star key={`empty-${i}`} className="h-4 w-4 text-gray-300" />
      ))}
    </div>
  );
}


================================================================================
FILE: /src/components/seller-card.tsx
================================================================================

'use client';

import Link from 'next/link';
import type { User } from '@/types';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { motion } from 'framer-motion';
import { Star, ShoppingBag } from 'lucide-react';

interface SellerCardProps {
  seller: User;
}

export default function SellerCard({ seller }: SellerCardProps) {
  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      className="w-full"
    >
      <Link href={`/seller/${seller.id}`} className="block group">
        <Card className="h-full transition-all duration-300 hover:border-primary/50 hover:shadow-md">
          <CardHeader className="flex-row items-center gap-3 p-3">
            <Avatar className="h-12 w-12 border-2 border-primary/50">
              <AvatarImage src={seller.avatar} alt={seller.shopName} data-ai-hint="person avatar"/>
              <AvatarFallback>{seller.shopName?.charAt(0)}</AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <CardTitle className="font-headline text-md group-hover:text-primary transition-colors">{seller.shopName}</CardTitle>
              <p className="text-xs text-muted-foreground">by {seller.name}</p>
            </div>
            {seller.planType === 'pro' && (
                <div className="flex items-center gap-1 rounded-full bg-primary/10 px-2 py-1 text-xs font-bold text-primary border border-primary/20">
                    <Star className="h-3 w-3" />
                </div>
            )}
          </CardHeader>
        </Card>
      </Link>
    </motion.div>
  );
}


================================================================================
FILE: /src/components/todays-special.tsx
================================================================================

'use client';

import { useEffect, useState } from 'react';
import { Button } from './ui/button';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { generateCollection, type GenerateCollectionOutput } from '@/ai/flows/generate-collection-flow';
import { Sparkles, Loader2 } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';

export default function TodaysSpecial() {
  const [collection, setCollection] = useState<GenerateCollectionOutput | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCollection = async () => {
      setLoading(true);
      try {
        const result = await generateCollection();
        setCollection(result);
      } catch (error) {
        console.error("Failed to generate collection:", error);
        // Fallback content
        setCollection({
          title: "Dinner Delights",
          description: "Explore a variety of delicious options perfect for your evening meal."
        });
      } finally {
        setLoading(false);
      }
    };
    fetchCollection();
  }, []);

  return (
    <section className="bg-secondary/50">
        <motion.div 
            className="container mx-auto py-16 md:py-24"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true, amount: 0.2 }}
            transition={{ duration: 0.5, delay: 0.2 }}
        >
            <Card className="max-w-4xl mx-auto text-center shadow-lg border-primary/20 bg-card">
              <CardHeader>
                <motion.div 
                    className="flex justify-center items-center gap-2 mb-2"
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true, amount: 0.5 }}
                    transition={{ duration: 0.5 }}
                >
                    <Sparkles className="h-6 w-6 md:h-8 md:w-8 text-primary" />
                    <h2 className="font-headline text-3xl font-extrabold md:text-5xl text-shadow-lg text-foreground">
                        Today's Special
                    </h2>
                    <Sparkles className="h-6 w-6 md:h-8 md:w-8 text-primary" />
                </motion.div>
                 <CardTitle className="text-2xl md:text-3xl font-bold text-primary pt-2">
                    {loading ? <Loader2 className="mx-auto h-8 w-8 animate-spin" /> : collection?.title}
                </CardTitle>
                <CardDescription className="md:text-lg text-muted-foreground pt-2 h-14">
                   {loading ? "Generating a special collection just for you..." : collection?.description}
                </CardDescription>
              </CardHeader>
              <CardContent>
                 <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className="mt-4 inline-block"
                >
                    <Button asChild size="lg" className="rounded-full shadow-lg font-bold text-lg px-10 py-6">
                        <Link href="/products">Explore Collection</Link>
                    </Button>
                </motion.div>
              </CardContent>
            </Card>
      </motion.div>
    </section>
  );
}


================================================================================
FILE: /src/contexts/app-provider.tsx
================================================================================
'use client';

import { ReactNode } from 'react';
import { LanguageProvider } from './language-context';
import { AuthProvider } from './auth-context';
import { CartProvider } from './cart-context';

export function AppProvider({ children }: { children: ReactNode }) {
  return (
    <LanguageProvider>
      <AuthProvider>
        <CartProvider>{children}</CartProvider>
      </AuthProvider>
    </LanguageProvider>
  );
}


================================================================================
FILE: /src/contexts/auth-context.tsx
================================================================================

'use client';

import { createContext, useState, useMemo, ReactNode, useCallback, useEffect } from 'react';
import { User } from '@/types';
import { auth, db } from '@/firebase';
import { onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';
import { useToast } from '@/hooks/use-toast';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  isAuthenticated: boolean;
  login: (email: string, pass: string) => Promise<boolean>;
  logout: () => void;
  register: (name: string, email: string, phone: string, pass: string, role: 'buyer' | 'seller', sellerDetails?: { shopName: string; shopAddress: string }) => Promise<boolean>;
  refreshUser: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const fetchUserDoc = useCallback(async (firebaseUser: import('firebase/auth').User | null) => {
    if (firebaseUser) {
        const userDocRef = doc(db, 'users', firebaseUser.uid);
        const userDocSnap = await getDoc(userDocRef);
        if (userDocSnap.exists()) {
          setUser({ id: firebaseUser.uid, ...userDocSnap.data() } as User);
        } else {
          // Handle case where user exists in Auth but not Firestore
          setUser(null);
        }
      } else {
        setUser(null);
      }
      setLoading(false);
  }, []);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      await fetchUserDoc(firebaseUser);
    });
    return () => unsubscribe();
  }, [fetchUserDoc]);

  const refreshUser = useCallback(async () => {
    await fetchUserDoc(auth.currentUser);
  }, [fetchUserDoc]);

  const login = useCallback(async (email: string, pass: string) => {
    try {
      await signInWithEmailAndPassword(auth, email, pass);
      return true;
    } catch (error: any) {
      toast({ title: "Login Failed", description: error.message, variant: 'destructive' });
      return false;
    }
  }, [toast]);

  const logout = useCallback(async () => {
    try {
      await signOut(auth);
    } catch (error: any) {
      toast({ title: "Logout Failed", description: error.message, variant: 'destructive' });
    }
  }, [toast]);

  const register = useCallback(async (name: string, email: string, phone: string, pass: string, role: 'buyer' | 'seller', sellerDetails?: { shopName: string; shopAddress: string }) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);
      const firebaseUser = userCredential.user;

      const userData: Omit<User, 'id'> = {
        name,
        email,
        phone,
        role,
        avatar: `https://placehold.co/100x100.png?text=${name.charAt(0)}`,
        createdAt: serverTimestamp(),
      };
      
      if (role === 'seller') {
          userData.shopName = sellerDetails?.shopName;
          userData.shopAddress = sellerDetails?.shopAddress;
          userData.planType = 'free';
          userData.productUploadCount = 0;
      }

      await setDoc(doc(db, "users", firebaseUser.uid), userData);
      
      return true;
    } catch (error: any) {
      toast({ title: "Registration Failed", description: error.message, variant: 'destructive' });
      return false;
    }
  }, [toast]);

  const isAuthenticated = !!user;

  const value = useMemo(() => ({
    user,
    isAuthenticated,
    loading,
    login,
    logout,
    register,
    refreshUser,
  }), [user, isAuthenticated, loading, login, logout, register, refreshUser]);

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

    
================================================================================
FILE: /src/contexts/cart-context.tsx
================================================================================
'use client';

import { createContext, useState, useMemo, ReactNode, useEffect, useCallback } from 'react';
import type { CartItem, Product } from '@/types';

interface CartContextType {
  cart: CartItem[];
  addToCart: (product: Product, quantity?: number) => void;
  removeFromCart: (productId: string) => void;
  updateQuantity: (productId: string, quantity: number) => void;
  clearCart: () => void;
  cartCount: number;
  cartTotal: number;
}

export const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: ReactNode }) {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    try {
      const storedCart = localStorage.getItem('chefs-bd-cart');
      if (storedCart) {
        setCart(JSON.parse(storedCart));
      }
    } catch (error) {
      console.error("Failed to parse cart from localStorage", error);
    }
  }, []);

  useEffect(() => {
    if (isMounted) {
      localStorage.setItem('chefs-bd-cart', JSON.stringify(cart));
    }
  }, [cart, isMounted]);

  const addToCart = useCallback((product: Product, quantity = 1) => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === product.id);
      if (existingItem) {
        return prevCart.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + quantity }
            : item
        );
      }
      return [...prevCart, { ...product, quantity }];
    });
  }, []);

  const removeFromCart = useCallback((productId: string) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== productId));
  }, []);

  const updateQuantity = useCallback((productId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    setCart((prevCart) =>
      prevCart.map((item) =>
        item.id === productId ? { ...item, quantity } : item
      )
    );
  }, [removeFromCart]);

  const clearCart = useCallback(() => {
    setCart([]);
  }, []);

  const cartCount = useMemo(() => {
    return cart.reduce((count, item) => count + item.quantity, 0);
  }, [cart]);

  const cartTotal = useMemo(() => {
    return cart.reduce((total, item) => total + item.price * item.quantity, 0);
  }, [cart]);

  const value = useMemo(() => ({
    cart,
    addToCart,
    removeFromCart,
    updateQuantity,
    clearCart,
    cartCount,
    cartTotal,
  }), [cart, addToCart, removeFromCart, updateQuantity, clearCart, cartCount, cartTotal]);

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
}


================================================================================
FILE: /src/contexts/language-context.tsx
================================================================================
'use client';

import { createContext, useState, useMemo, ReactNode, useCallback } from 'react';
import { translations } from '@/lib/translations';

type Language = 'en' | 'bn';

interface LanguageContextType {
  language: Language;
  toggleLanguage: () => void;
  t: (key: keyof (typeof translations)['en']) => string;
}

export const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>('en');

  const toggleLanguage = useCallback(() => {
    setLanguage((prev) => (prev === 'en' ? 'bn' : 'en'));
  }, []);

  const t = useCallback((key: keyof (typeof translations)['en']): string => {
    return translations[language][key] || translations['en'][key];
  }, [language]);

  const value = useMemo(() => ({
    language,
    toggleLanguage,
    t,
  }), [language, toggleLanguage, t]);

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}


================================================================================
FILE: /src/firebase.js
================================================================================

import { initializeApp, getApps, getApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "AIzaSyCfqpsCxS2dkmQUaKDHAd7EWS6-ixCL4EE",
  authDomain: "chefs-bd.firebaseapp.com",
  projectId: "chefs-bd",
  storageBucket: "chefs-bd.appspot.com",
  messagingSenderId: "715801468404",
  appId: "1:715801468404:web:cd31745ac650c715db2da1"
};

// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();

const db = getFirestore(app);
const auth = getAuth(app);

export { db, auth };


================================================================================
FILE: /src/hooks/use-mobile.tsx
================================================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


================================================================================
FILE: /src/hooks/use-toast.ts
================================================================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


================================================================================
FILE: /src/lib/actions.ts
================================================================================

'use server';

import { v2 as cloudinary } from 'cloudinary';
import { addDoc, collection, serverTimestamp, doc, runTransaction, updateDoc, writeBatch } from 'firebase/firestore';
import { db } from '@/firebase';
import type { User, Product } from '@/types';
import { getAllBuyers } from './services/user-service';

// Configure Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function uploadImage(formData: FormData) {
  const file = formData.get('image') as File;
  if (!file) {
    return { error: 'No image file provided.' };
  }

  try {
    const arrayBuffer = await file.arrayBuffer();
    const buffer = new Uint8Array(arrayBuffer);
    
    const result = await new Promise<{ secure_url: string; public_id: string; }>((resolve, reject) => {
        cloudinary.uploader.upload_stream({ folder: "chefs-bd" }, (error, result) => {
            if (error) {
                reject(error);
                return;
            }
            if(result) {
                resolve(result);
            } else {
                reject(new Error("Cloudinary upload failed"));
            }
        }).end(buffer);
    });

    return { success: true, url: result.secure_url };
  } catch (error) {
    console.error('Upload failed', error);
    return { error: 'Image upload failed.' };
  }
}

export async function addProduct(productData: any, userId: string) {
    const { name, description, price, category, deliveryTime, image, commissionPercentage } = productData;

    try {
        const userRef = doc(db, "users", userId);
        
        const { newProductId, sellerData } = await runTransaction(db, async (transaction) => {
            const userDoc = await transaction.get(userRef);
            if (!userDoc.exists()) {
                throw "User does not exist!";
            }
            
            const userData = userDoc.data() as User;
            const currentUploads = userData.productUploadCount || 0;
            
            if (userData.planType === 'free' && currentUploads >= 5) {
                throw "Upload limit for free plan reached.";
            }

            const productDocRef = doc(collection(db, "products"));
            transaction.set(productDocRef, {
                name,
                description,
                price: Number(price),
                category,
                deliveryTime,
                image, // This is the Cloudinary URL
                commissionPercentage: Number(commissionPercentage),
                sellerId: userId,
                rating: Math.floor(Math.random() * 3) + 3, // Random initial rating between 3 and 5
                createdAt: serverTimestamp(),
                isAvailable: true, // New products are available by default
            });

            // Increment productUploadCount
            transaction.update(userRef, { productUploadCount: currentUploads + 1 });

            return { newProductId: productDocRef.id, sellerData: userData };
        });
        
        // After transaction is successful, create notifications for all buyers
        const buyers = await getAllBuyers();
        const notificationBatch = writeBatch(db);
        buyers.forEach(buyer => {
            const notificationRef = doc(collection(db, 'notifications'));
            notificationBatch.set(notificationRef, {
                userId: buyer.id,
                productId: newProductId,
                message: `New product added: ${name} by ${sellerData.shopName || sellerData.name}`,
                type: 'new-product',
                createdAt: serverTimestamp(),
                isRead: false,
            });
        });
        await notificationBatch.commit();


        return { success: true, productId: newProductId };
    } catch (error: any) {
        console.error("Error adding product transactionally: ", error);
        return { error: typeof error === 'string' ? error : "Failed to add product." };
    }
}

export async function updateProduct(productId: string, productData: Partial<Product>) {
    const productRef = doc(db, "products", productId);

    try {
        const dataToUpdate: Record<string, any> = {};

        if (productData.name !== undefined) dataToUpdate.name = productData.name;
        if (productData.description !== undefined) dataToUpdate.description = productData.description;
        if (productData.price !== undefined) dataToUpdate.price = Number(productData.price);
        if (productData.category !== undefined) dataToUpdate.category = productData.category;
        if (productData.deliveryTime !== undefined) dataToUpdate.deliveryTime = productData.deliveryTime;
        if (productData.image !== undefined) dataToUpdate.image = productData.image;
        if (productData.commissionPercentage !== undefined) dataToUpdate.commissionPercentage = Number(productData.commissionPercentage);
        if (productData.isAvailable !== undefined) dataToUpdate.isAvailable = productData.isAvailable;

        await updateDoc(productRef, dataToUpdate);
        return { success: true };
    } catch (error) {
        console.error("Error updating product: ", error);
        return { error: "Failed to update product." };
    }
}

export async function updateUser(userId: string, userData: Partial<Pick<User, 'name' | 'phone' | 'shopName' | 'shopAddress' | 'avatar'>>) {
    const userRef = doc(db, "users", userId);
    try {
        const dataToUpdate: Record<string, any> = {};
        if (userData.name) dataToUpdate.name = userData.name;
        if (userData.phone) dataToUpdate.phone = userData.phone;
        if (userData.shopName) dataToUpdate.shopName = userData.shopName;
        if (userData.shopAddress) dataToUpdate.shopAddress = userData.shopAddress;
        if (userData.avatar) dataToUpdate.avatar = userData.avatar;

        if (Object.keys(dataToUpdate).length === 0) {
            return { success: true }; // Nothing to update
        }

        await updateDoc(userRef, dataToUpdate);
        return { success: true };
    } catch (error: any) {
        console.error("Error updating user: ", error);
        return { error: "Failed to update profile." };
    }
}


================================================================================
FILE: /src/lib/data.ts
================================================================================

import type { Product, User, Order, Review, Notification } from '@/types';

export const categories = [
    { name: 'Burger', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/burger1_cohr5o.png', hint: 'burger' },
    { name: 'Pizza', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391393/pizza1_kchjpf.png', hint: 'pizza' },
    { name: 'Biryani', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1718131336/biryani_k1z4wv.png', hint: 'biryani' },
    { name: 'Kebab', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1718131336/kebab_g0c5yq.png', hint: 'kebab' },
    { name: 'Set Menu', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1718131337/set-menu_r8xl5j.png', hint: 'rice meal' },
    { name: 'Pasta', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1718131336/pasta_dubenm.png', hint: 'pasta' },
    { name: 'Soup', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1718131337/soup_u8zqqn.png', hint: 'soup' },
    { name: 'Salad', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1718131337/salad_q3soix.png', hint: 'salad' },
    { name: 'Dessert', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/dessert1_gq4gsh.png', hint: 'cake' },
    { name: 'Drinks', image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/drink2_tqjcvw.png', hint: 'drinks' },
];

export const users: User[] = [
  { 
    id: 'seller1', 
    name: 'Burger Queen', 
    email: 'seller1@test.com', 
    role: 'seller', 
    avatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391393/avatar1_b1wt3x.png',
    shopName: 'Burger Queen',
    shopAddress: '123 Burger Lane, Rangpur',
    zone: 'inside-rangpur-city',
    planType: 'pro',
    productUploadCount: 8,
  },
  { 
    id: 'seller2', 
    name: 'Pizza King', 
    email: 'seller2@test.com', 
    role: 'seller', 
    avatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391393/avatar2_y9kzqs.png',
    shopName: 'Pizza King',
    shopAddress: '456 Pizza Street, Rangpur',
    zone: 'rangpur-division',
    planType: 'free',
    productUploadCount: 4,
  },
  { id: 'buyer1', name: 'Aisha Ahmed', email: 'buyer1@test.com', role: 'buyer', avatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391394/avatar3_h3g5ar.png' },
  { id: 'buyer2', name: 'Rahim Khan', email: 'buyer2@test.com', role: 'buyer', avatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391394/avatar4_b3jd8q.png' },
];

export const products: Product[] = [
  {
    id: 'prod1',
    name: 'Classic Beef Burger',
    description: 'A juicy beef patty with fresh lettuce, tomato, onions, and our secret sauce, all in a toasted brioche bun.',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/burger1_cohr5o.png',
    category: 'Burger',
    rating: 4.5,
    price: 350,
    sellerId: 'seller1',
    deliveryTime: '20-30 mins',
    commissionPercentage: 5,
  },
  {
    id: 'prod2',
    name: 'Spicy Chicken Burger',
    description: 'Crispy fried chicken breast with a spicy kick, pickles, and mayo. Not for the faint of heart!',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/burger2_pnh0kj.png',
    category: 'Burger',
    rating: 4.8,
    price: 400,
    sellerId: 'seller1',
    deliveryTime: '25-35 mins',
    commissionPercentage: 7,
  },
  {
    id: 'prod3',
    name: 'Margherita Pizza',
    description: 'The classic pizza with fresh mozzarella, basil, and a rich tomato sauce on a thin crust.',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391393/pizza1_kchjpf.png',
    category: 'Pizza',
    rating: 4.2,
    price: 650,
    sellerId: 'seller2',
    deliveryTime: '30-45 mins',
    commissionPercentage: 10,
  },
  {
    id: 'prod4',
    name: 'Pepperoni Pizza',
    description: 'A crowd-pleaser. Generous amounts of pepperoni and mozzarella cheese.',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391393/pizza2_k1sctj.png',
    category: 'Pizza',
    rating: 4.6,
    price: 750,
    sellerId: 'seller2',
    deliveryTime: '30-45 mins',
    commissionPercentage: 10,
  },
  {
    id: 'prod5',
    name: 'Cola',
    description: 'A refreshing can of cola to quench your thirst.',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/drink1_g6qjrm.png',
    category: 'Drinks',
    rating: 5,
    price: 40,
    sellerId: 'seller1',
    deliveryTime: '5-10 mins',
    commissionPercentage: 5,
  },
  {
    id: 'prod6',
    name: 'Lemonade',
    description: 'Freshly squeezed lemonade, the perfect balance of sweet and tart.',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/drink2_tqjcvw.png',
    category: 'Drinks',
    rating: 4.7,
    price: 80,
    sellerId: 'seller2',
    deliveryTime: '10-15 mins',
    commissionPercentage: 5,
  },
  {
    id: 'prod7',
    name: 'Chocolate Lava Cake',
    description: 'Warm, gooey chocolate cake with a molten center. Served with a scoop of vanilla ice cream.',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/dessert1_gq4gsh.png',
    category: 'Dessert',
    rating: 4.9,
    price: 250,
    sellerId: 'seller1',
    deliveryTime: '15-20 mins',
    commissionPercentage: 7,
  },
    {
    id: 'prod8',
    name: 'Veggie Burger',
    description: 'A delicious and hearty vegetarian patty with all the classic fixings. A healthy choice!',
    image: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391392/burger3_i6lqwh.png',
    category: 'Burger',
    rating: 4.3,
    price: 320,
    sellerId: 'seller1',
    deliveryTime: '20-30 mins',
    commissionPercentage: 5,
  },
];

export const reviews: Review[] = [
  {
    id: 'review1',
    productId: 'prod1',
    userId: 'buyer1',
    userName: 'Aisha Ahmed',
    userAvatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391394/avatar3_h3g5ar.png',
    rating: 5,
    comment: 'Absolutely the best burger in town! The patty was cooked to perfection. Will definitely order again.',
    createdAt: new Date('2024-05-20T14:30:00Z'),
  },
  {
    id: 'review2',
    productId: 'prod1',
    userId: 'buyer2',
    userName: 'Rahim Khan',
    userAvatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391394/avatar4_b3jd8q.png',
    rating: 4,
    comment: 'Very good burger, but the bun was a little soggy. The sauce is amazing though!',
    createdAt: new Date('2024-05-18T19:00:00Z'),
  },
  {
    id: 'review3',
    productId: 'prod3',
    userId: 'buyer1',
    userName: 'Aisha Ahmed',
    userAvatar: 'https://res.cloudinary.com/drewes4b7/image/upload/v1717391394/avatar3_h3g5ar.png',
    rating: 4,
    comment: 'Good classic Margherita. The basil was fresh and fragrant. Crust could be a bit crispier.',
    createdAt: new Date('2024-05-15T12:00:00Z'),
  },
];


export const orders: Order[] = [
  // This data is now primarily managed by Firestore, but kept for reference/testing
];

export const notifications: Notification[] = [
    // This data is now primarily managed by Firestore, but kept for reference/testing
]


================================================================================
FILE: /src/lib/hooks.ts
================================================================================
import { useContext } from 'react';
import { LanguageContext } from '@/contexts/language-context';
import { AuthContext } from '@/contexts/auth-context';
import { CartContext } from '@/contexts/cart-context';

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const useCart = () => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};


================================================================================
FILE: /src/lib/services/product-service.ts
================================================================================

'use server';

import { collection, getDocs, doc, getDoc, query, where, Timestamp } from 'firebase/firestore';
import { db } from '@/firebase';
import type { Product } from '@/types';

// Helper function to safely serialize Firestore Timestamps
const serializeProduct = (doc: any): Product => {
    const data = doc.data();
    const product: Product = { id: doc.id, ...data };
    
    if (data.createdAt && data.createdAt instanceof Timestamp) {
        product.createdAt = data.createdAt.toDate().toISOString();
    }
    
    return product;
}

export async function getProducts(): Promise<Product[]> {
  const productsCol = collection(db, 'products');
  const productSnapshot = await getDocs(productsCol);
  const productList = productSnapshot.docs.map(serializeProduct);
  return productList;
}

export async function getProductById(id: string): Promise<Product | null> {
  const productRef = doc(db, 'products', id);
  const productSnap = await getDoc(productRef);

  if (productSnap.exists()) {
    return serializeProduct(productSnap);
  } else {
    return null;
  }
}

export async function getProductsBySeller(sellerId: string): Promise<Product[]> {
  const q = query(collection(db, 'products'), where('sellerId', '==', sellerId));
  const querySnapshot = await getDocs(q);
  const products = querySnapshot.docs.map(serializeProduct);
  return products;
}


================================================================================
FILE: /src/lib/services/user-service.ts
================================================================================

'use server';

import { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '@/firebase';
import type { User } from '@/types';

export async function getUserById(id: string): Promise<User | null> {
  if (!id) return null;
  
  const userRef = doc(db, 'users', id);
  const userSnap = await getDoc(userRef);

  if (userSnap.exists()) {
    return { id: userSnap.id, ...userSnap.data() } as User;
  } else {
    console.warn(`User with id ${id} not found.`);
    return null;
  }
}

export async function getAllBuyers(): Promise<User[]> {
    const q = query(collection(db, 'users'), where('role', '==', 'buyer'));
    const querySnapshot = await getDocs(q);
    const buyers = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as User));
    return buyers;
}

export async function getAllSellers(): Promise<User[]> {
    const q = query(collection(db, 'users'), where('role', '==', 'seller'));
    const querySnapshot = await getDocs(q);
    const sellers = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as User));
    return sellers;
}


================================================================================
FILE: /src/lib/translations.ts
================================================================================
export const translations = {
  en: {
    appName: "Chefs' BD",
    tagline: "Authentic flavors, delivered to your door.",
    browseProducts: "Browse Products",
    login: "Login",
    register: "Register",
    featuredProducts: "Featured Products",
    allProducts: "All Products",
    home: "Home",
    products: "Products",
    cart: "Cart",
    dashboard: "Dashboard",
    profile: "Profile",
    logout: "Logout",
    addToCart: "Add to Cart",
    searchPlaceholder: "Search by name...",
    filterByCategory: "Filter by category",
    all: "All",
    filterByRating: "Filter by rating",
    heroTitle: "Savor the Taste of Tradition",
    heroSubtitle: "Experience the best of local cuisine, made with passion and delivered with care. Your next favorite meal is just a click away.",
    myProducts: "My Products",
    addProduct: "Add Product",
    previousOrders: "Previous Orders",
  },
  bn: {
    appName: "শেফস বিডি",
    tagline: "খাঁটি স্বাদ, আপনার দোরগোড়ায় পৌঁছে দেওয়া হয়।",
    browseProducts: "পণ্য ব্রাউজ করুন",
    login: "লগইন",
    register: "নিবন্ধন",
    featuredProducts: "আলোচিত পণ্য",
    allProducts: "সকল পণ্য",
    home: "হোম",
    products: "পণ্য",
    cart: "কার্ট",
    dashboard: "ড্যাশবোর্ড",
    profile: "প্রোফাইল",
    logout: "লগআউট",
    addToCart: "কার্টে যোগ করুন",
    searchPlaceholder: "নাম দিয়ে অনুসন্ধান করুন...",
    filterByCategory: "বিভাগ দ্বারা ফিল্টার করুন",
    all: "সব",
    filterByRating: "রেটিং দ্বারা ফিল্টার করুন",
    heroTitle: "ঐতিহ্যের স্বাদ গ্রহণ করুন",
    heroSubtitle: "স্থানীয় খাবারের সেরা অভিজ্ঞতা নিন, যা আবেগ দিয়ে তৈরি এবং যত্ন সহকারে বিতরণ করা হয়। আপনার পরবর্তী প্রিয় খাবার মাত্র এক ক্লিক দূরে।",
    myProducts: "আমার পণ্য",
    addProduct: "পণ্য যোগ করুন",
    previousOrders: "পূর্ববর্তী অর্ডার",
  },
};


================================================================================
FILE: /src/lib/utils.ts
================================================================================

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
import type { DeliveryZone } from "@/types";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


const SHIPPING_RATES = {
  'inside-rangpur-city': {
    'inside-rangpur-city': 40,
    'rangpur-division': 80,
    'outside-rangpur': 130,
  },
  'rangpur-division': {
    'inside-rangpur-city': 80,
    'rangpur-division': 70,
    'outside-rangpur': 150,
  },
  'outside-rangpur': {
    'inside-rangpur-city': 130,
    'rangpur-division': 150,
    'outside-rangpur': 180,
  },
};


export function calculateShippingCost(sellerZone: DeliveryZone, buyerZone: DeliveryZone): number {
  return SHIPPING_RATES[sellerZone]?.[buyerZone] ?? 150; // Return a default value if zones are not found
}


================================================================================
FILE: /src/tailwind.config.ts
================================================================================

import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        body: ['var(--font-pt-sans)', 'sans-serif'],
        headline: ['var(--font-space-grotesk)', 'sans-serif'],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;


================================================================================
FILE: /src/types/index.ts
================================================================================

import type { Timestamp } from 'firebase/firestore';

export type DeliveryZone = 'inside-rangpur-city' | 'rangpur-division' | 'outside-rangpur';

export interface Review {
  id: string;
  userId: string;
  userName: string;
  userAvatar: string;
  productId: string;
  rating: number;
  comment: string;
  createdAt: Date | Timestamp;
}

export interface Product {
  id: string;
  name: string;
  image: string;
  description: string;
  category: 'Burger' | 'Pizza' | 'Drinks' | 'Dessert' | 'Biryani' | 'Kebab' | 'Set Menu' | 'Pasta' | 'Soup' | 'Salad';
  rating: number;
  price: number;
  sellerId: string;
  deliveryTime: string;
  commissionPercentage: 5 | 7 | 10;
  isAvailable?: boolean;
  createdAt?: Date | Timestamp | string;
}

export type SellerPlan = 'free' | 'pro';

export interface User {
  id: string;
  name: string;
  email: string;
  phone?: string;
  role: 'buyer' | 'seller';
  avatar: string;
  shopName?: string;
  shopAddress?: string;
  createdAt?: Date | Timestamp;
  zone?: DeliveryZone;
  planType?: SellerPlan;
  productUploadCount?: number;
}

export interface CartItem extends Product {
  quantity: number;
}

export interface Order {
  id?: string;
  buyerId: string;
  sellerIds: string[];
  items: CartItem[];
  total: number;
  status: 'Pending' | 'Preparing' | 'Delivered' | 'Cancelled';
  createdAt: Date | Timestamp;
  address: string;
  contact: string;
  shippingCost?: number;
  deliveryZone?: DeliveryZone;
  platformFee?: number;
  sellerReceives?: number;
}

export type NotificationType = 'new-order' | 'order-status' | 'new-product';

export interface Notification {
    id: string;
    userId: string; // Can be buyer or seller
    type: NotificationType;
    message: string;
    isRead: boolean;
    createdAt: Timestamp;
    orderId?: string; // Link to order
    productId?: string; // Link to product
}


================================================================================
FILE: /tailwind.config.ts
================================================================================
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        body: ['var(--font-pt-sans)', 'sans-serif'],
        headline: ['var(--font-space-grotesk)', 'sans-serif'],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "fade-in-up": {
          "0%": {
            opacity: "0",
            transform: "translateY(20px)",
          },
          "100%": {
            opacity: "1",
            transform: "translateY(0)",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in-up": "fade-in-up 0.5s ease-out",
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;


================================================================================
FILE: /tsconfig.json
================================================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
